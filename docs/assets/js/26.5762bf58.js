(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{345:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"item-05-know-what-functions-c-silently-writes-and-calls-了解c-默默编写并调用哪些函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-05-know-what-functions-c-silently-writes-and-calls-了解c-默默编写并调用哪些函数"}},[t._v("#")]),t._v(" Item 05：Know what  functions C++silently writes and calls. 了解C++默默编写并调用哪些函数")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[t._v("C++ 自动生成的ctor，dtor， copy assignment（op=重载），(big three, 除此之外还有移动构造， 移动赋值， 不过这需要自己的写）")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Empty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t    Empty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Empty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Empty e1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Empty "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("e2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    e2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("ol",[a("li",[a("p",[t._v("默认的构造， 析构函数， 只能是浅复制， 值的复制， 如果有指针， 只能指向同一个地址， 而不能有两份内存出来；")])]),t._v(" "),a("li",[a("p",[t._v("对const成员变量， reference变量， 自动生成的copy assignment是不能对这些东西进行赋值和拷贝操作的")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Timekeeper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Timekeeper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TimeKeeper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("经验： class里面如果有一个virtual的函数， 就为这个类弄一个virtual的析构函数；")])]),t._v(" "),a("li",[a("p",[t._v("纯虚函数？纯虚函数会带来一个抽象基类， 抽象基类不能实例化；但是抽象基类要有一个纯虚的析构函数，需要在H文件里面单独提供一份定义；这样在析构的时候就不会显式运行到在这个纯虚函数；")]),t._v(" "),a("p",[t._v("让其他的子类在析构的时候， 会使用到子类自己的析构函数， 而不是默认的析构， 或者是纯虚基类的析构（纯虚基类的纯虚析构函数， 是空的）")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AWOV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AWOV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AMOV")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AMOV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在.h文件里面单独提供一份定义， 因为虽然是纯虚函数， 但是子类在析构的时候，还是会调用到这个")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])])]),t._v(" "),a("h3",{attrs:{id:"item-06-explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want-若不想使用编译器自动生成的函数-就该明确拒绝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-06-explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want-若不想使用编译器自动生成的函数-就该明确拒绝"}},[t._v("#")]),t._v(" Item 06：Explicitly     disallow the use of compiler-generated functions you do not want. 若不想使用编译器自动生成的函数，就该明确拒绝")])]),t._v(" "),a("li",[a("p",[t._v("如何拒绝使用这些自动生成的函数，")]),t._v(" "),a("ol",[a("li",[t._v("使用=delete来禁止使用拷贝构造， 拷贝赋值，")]),t._v(" "),a("li",[t._v("以前在没有=delete关键字的时候， 可以把这些函数放在private里面")])]),t._v(" "),a("h3",{attrs:{id:"item-07-declare-destructors-virtual-in-polymorphic-base-classes-为多态基类声明virtual析构函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-07-declare-destructors-virtual-in-polymorphic-base-classes-为多态基类声明virtual析构函数"}},[t._v("#")]),t._v(" Item 07：Declare destructors virtual in polymorphic base classes. 为多态基类声明virtual析构函数")])]),t._v(" "),a("li",[a("p",[t._v("多态基类的析构函数最好弄成virtual的， 如果是non-virtual的，那么借由基类指针传进来的对象， 析构的时候， 派生出来的部分会被漏掉")]),t._v(" "),a("ol",[a("li",[t._v("如果析构函数不是virtual的， 那么delete基类指针来进行析构的话。derived部分偶尔会被遗漏掉；")]),t._v(" "),a("li",[t._v("为什么不是virtual的构造函数？因为我们构造的时候， 基本上都是用derived类来进行构造的；")])]),t._v(" "),a("p",[t._v("问题： 对于virtual function， 如何进行派生使用， 如何借由virtual函数来进行多态？")])])]),t._v(" "),a("h3",{attrs:{id:"item-08-prevent-exceptions-from-leaving-destructors-别让异常逃离析构函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-08-prevent-exceptions-from-leaving-destructors-别让异常逃离析构函数"}},[t._v("#")]),t._v(" Item 08：Prevent     exceptions from leaving destructors. 别让异常逃离析构函数")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[t._v("析构函数不要吐出异常（别让异常逃离析构函数）, "),a("strong",[t._v("为什么?")])]),t._v(" "),a("ol",[a("li",[t._v("如果不处理异常， 会带来一些不明确的行为， 或者程序半路断掉")]),t._v(" "),a("li",[t._v("所以要好好善后；怎么办，如果析构函数真的抛出异常， 就在析构函数里面进行try{} catch{} , 要么记录下来，立即停止程序，不重要的异常可以不停下来， 让程序继续进行；也可以用单独的函数来处理异常， 但总之就是在类内部， 处理好异常， 不要让异常逃出析构， 这样可以封装得更完整")])])])]),t._v(" "),a("h3",{attrs:{id:"item-09-never-call-virtual-functions-during-construction-or-destruction-绝不在构造和析构过程中调用virtual函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-09-never-call-virtual-functions-during-construction-or-destruction-绝不在构造和析构过程中调用virtual函数"}},[t._v("#")]),t._v(" Item 09：Never call virtual functions during construction or destruction. 绝不在构造和析构过程中调用virtual函数")]),t._v(" "),a("ol",{attrs:{start:"9"}},[a("li",[a("p",[t._v("构造和析构函数中， 不要调用virtual函数， "),a("strong",[t._v("为什么?")]),t._v("， "),a("strong",[t._v("static函数相关的使用场景和效果？")])]),t._v(" "),a("ol",[a("li",[t._v("构造的时候， derived对象还没有生成， 所以这个时候还用不到自身特化的virtual function， 只能用base class里面的版本；")]),t._v(" "),a("li",[t._v("析构的时候， 只要一开始析构， 对象内的derived class成员变量就是未定义值， 所以这个时候virtual function还是会跑到父类里面去；")]),t._v(" "),a("li",[t._v("父类里面的static函数， 有什么作用？ 是在函数编译的时候， 放在什么段里面？（很大程度和python的static method类似， 能通过类名调用）\nstatic函数里面不能调用non-static成员变量， 也不能调用non-static成员函数; static函数没有"),a("em",[t._v("this指针")])])])])]),t._v(" "),a("h3",{attrs:{id:"item-10-have-assignment-operators-return-a-reference-to-this-令operator-返回一个-reference-to-this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-10-have-assignment-operators-return-a-reference-to-this-令operator-返回一个-reference-to-this"}},[t._v("#")]),t._v(" Item 10：Have assignment     operators return a reference to*this. 令operator=返回一个     reference to *this")]),t._v(" "),a("ol",{attrs:{start:"10"}},[a("li",[a("p",[t._v("operator= 最好是返回一个 reference to *this,")]),t._v(" "),a("ol",[a("li",[t._v("因为这样可以拥有连续赋值的特性， 例如： x = y = z = 15")])])])]),t._v(" "),a("h3",{attrs:{id:"item-11-handle-assignment-to-self-in-operator-在operator-中判断-自我赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-11-handle-assignment-to-self-in-operator-在operator-中判断-自我赋值"}},[t._v("#")]),t._v(" Item 11：Handle assignment to self in operator=. 在operator=中判断“自我赋值”")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Widget"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" pb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tpb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bitmap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h3",{attrs:{id:"item-12-copy-all-parts-of-an-object-复制对象时勿忘其每一个成分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-12-copy-all-parts-of-an-object-复制对象时勿忘其每一个成分"}},[t._v("#")]),t._v(" Item 12：Copy all parts of an object. 复制对象时勿忘其每一个成分")]),t._v(" "),a("ol",{attrs:{start:"12"}},[a("li",[a("p",[t._v("自定义"),a("strong",[t._v("拷贝构造")]),t._v("函数的时候， 要复制所有local的变量， 可以使用基类的一些拷贝构造函数对一些成员拷贝；")]),t._v(" "),a("p",[t._v("因为有一些基类对象的拷贝， 必须要通过"),a("strong",[t._v("基类的拷贝构造")]),t._v("函数来进行深度拷贝；")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("PriorityCustomer"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" PriorityCustomer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("logCall")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"......"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Customer"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里直接调用了base class的拷贝构造函数来进行；")]),t._v("\n    priority "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("priority"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("不要使用copy assignment 来调用copy constructor; 反过来也不建议， 因为这就像对一个构造好的对象进行操作， 先有鸡还是先有蛋？")]),t._v(" "),a("p",[t._v("最终还是要将他么共同的一些实际操作放到函数里面， 因为只要使用上面两种函数， 都会要实现构造一个临时的对象， 但对象在这些函数运行过程中都是没有构造好的；")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);