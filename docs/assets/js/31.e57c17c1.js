(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{349:function(t,e,a){"use strict";a.r(e);var s=a(6),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"模板-templates-and-gp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板-templates-and-gp"}},[t._v("#")]),t._v(" 模板，Templates and GP")]),t._v(" "),a("h3",{attrs:{id:"item-41-了解隐式接口和编译期多态-understand-implicit-interfaces-and-compile-time-polymorphism"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-41-了解隐式接口和编译期多态-understand-implicit-interfaces-and-compile-time-polymorphism"}},[t._v("#")]),t._v(" Item 41：了解隐式接口和编译期多态 Understand     implicit interfaces and compile-time polymorphism.")]),t._v(" "),a("ol",{attrs:{start:"41"}},[a("li",[t._v("隐式接口和编译期多态（和RTTI的区别？）")])]),t._v(" "),a("h3",{attrs:{id:"item-42-了解typename的双重意义-understand-the-two-meanings-of-typename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-42-了解typename的双重意义-understand-the-two-meanings-of-typename"}},[t._v("#")]),t._v(" Item 42：了解typename的双重意义 Understand     the two meanings of typename.")]),t._v(" "),a("ol",{attrs:{start:"42"}},[a("li",[t._v("typename和class关键字， typename关键字的双重定义")])]),t._v(" "),a("h3",{attrs:{id:"item-43-学习处理模板化基类内的名称-know-how-to-access-names-in-templatized-base-classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-43-学习处理模板化基类内的名称-know-how-to-access-names-in-templatized-base-classes"}},[t._v("#")]),t._v(" Item 43：学习处理模板化基类内的名称 Know how to     access names in templatized base classes.")]),t._v(" "),a("ol",{attrs:{start:"43"}},[a("li",[t._v("如何处理模板化基类的里面的名称")])]),t._v(" "),a("h3",{attrs:{id:"item-44-将与参数无关的代码抽离templates-factor-parameter-independent-code-out-of-templates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-44-将与参数无关的代码抽离templates-factor-parameter-independent-code-out-of-templates"}},[t._v("#")]),t._v(" Item 44：将与参数无关的代码抽离templates Factor     parameter-independent code out of templates.")]),t._v(" "),a("ol",{attrs:{start:"44"}},[a("li",[t._v("参数无关的代码， 抽离template")])]),t._v(" "),a("h3",{attrs:{id:"item-45-运用成员函数模板接受所有兼容类型-use-member-function-templates-to-accept-all-compatible-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-45-运用成员函数模板接受所有兼容类型-use-member-function-templates-to-accept-all-compatible-types"}},[t._v("#")]),t._v(' Item 45：运用成员函数模板接受所有兼容类型 Use member     function templates to accept"all compatible types."')]),t._v(" "),a("ol",{attrs:{start:"45"}},[a("li",[t._v("使用成员函数模板来接受所有兼容的类型")])]),t._v(" "),a("h3",{attrs:{id:"item-46-需要类型转换时请为模板定义非成员函数-define-non-member-functions-inside-templates-when-type-conversions-are-desired"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-46-需要类型转换时请为模板定义非成员函数-define-non-member-functions-inside-templates-when-type-conversions-are-desired"}},[t._v("#")]),t._v(" Item 46：需要类型转换时请为模板定义非成员函数 Define     non-member functions inside templates when type conversions are desired.")]),t._v(" "),a("ol",{attrs:{start:"46"}},[a("li",[t._v("需要类型转换的时候， 为模板定义一个非成员函数")])]),t._v(" "),a("h3",{attrs:{id:"item-47-请使用traits-classes表现类型信息-use-traits-classes-for-information-about-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-47-请使用traits-classes表现类型信息-use-traits-classes-for-information-about-types"}},[t._v("#")]),t._v(" Item 47：请使用traits classes表现类型信息 Use     traits classes for information about types.")]),t._v(" "),a("ol",{attrs:{start:"47"}},[a("li",[t._v("使用traits来表现模板里面的类型信息")])]),t._v(" "),a("h3",{attrs:{id:"item-48-认识template元编程-be-aware-of-template-metaprogramming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item-48-认识template元编程-be-aware-of-template-metaprogramming"}},[t._v("#")]),t._v(" Item 48：认识template元编程 Be aware of     template metaprogramming.")]),t._v(" "),a("ol",{attrs:{start:"48"}},[a("li",[t._v("什么是template元编程")])])])}),[],!1,null,null,null);e.default=r.exports}}]);