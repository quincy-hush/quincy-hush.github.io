(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{346:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"effective-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#effective-c"}},[t._v("#")]),t._v(" Effective C++")]),t._v(" "),a("h2",{attrs:{id:"习惯c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#习惯c"}},[t._v("#")]),t._v(" 习惯C++")]),t._v(" "),a("h3",{attrs:{id:"item01-view-c-as-a-federation-of-languages-视c-为一个语言联邦"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item01-view-c-as-a-federation-of-languages-视c-为一个语言联邦"}},[t._v("#")]),t._v(" Item01：View C++as a federation of languages.  视C++为一个语言联邦")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("C++是一个语言联邦， 有多种编程范式: procedural （面向过程）, OOP（面向对象）， GP（泛型编程）,  Functional Programming（函数式编程），metaprograming(元编程），但差不多有四个主要的部分：")]),t._v(" "),a("ol",[a("li",[t._v("C：数组， 指针， 预处理， 程序员的自我修养")]),t._v(" "),a("li",[t._v("Object oriented C++： classs, encapsulation, ingeritance, polymorphism,  virtual function的动态绑定；（模板， 异常， 重载）")]),t._v(" "),a("li",[t._v("Template C++ (template metaprogramming, 模板元编程)")]),t._v(" "),a("li",[t._v("STL： container, iterator, algorithms, function objects")])])])]),t._v(" "),a("h3",{attrs:{id:"item02-prefer-consts-enums-and-inlines-to-defines-尽量以const-enum-inline替换-define"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item02-prefer-consts-enums-and-inlines-to-defines-尽量以const-enum-inline替换-define"}},[t._v("#")]),t._v(" Item02：Prefer consts，enums，and inlines to＃defines.  尽量以const，enum，inline替换＃define")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("用const， enum， inline代替 #define")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("const 能够更好地控制指针和指针所指变量的const属性， 并且#define对作用域不敏感，const可以定义某个类专属的常量；")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" GamePlayer"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("NumTurns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("enum是不可以取地址的，enum hack是模板原编程的基础技术，见item48")])]),t._v(" "),a("li",[a("p",[t._v("#define带来的安全性可以使用模板inline函数实现， 见item30")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 暂时用模板的typename代替")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callWithMax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])])])])]),t._v(" "),a("h3",{attrs:{id:"item03-use-const-whenever-possible-尽可能使用const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item03-use-const-whenever-possible-尽可能使用const"}},[t._v("#")]),t._v(" Item03：Use const whenever possible.  尽可能使用const")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[t._v("该用const的地方，尽可能使用const")]),t._v(" "),a("ol",[a("li",[t._v("类内的变量是否为const?")]),t._v(" "),a("li",[t._v("指针的双重const， 在什么之前就修饰什么， 指针为const， 还是指针指向的值为")]),t._v(" "),a("li",[t._v("函数的参数是否传const引用？ 使用const修饰， 会明示参数是否被改变（引用不改变， 要加const表示出来）；")]),t._v(" "),a("li",[t._v("成员函数后是否要加const？ 看成员函数是否会修改类内的值；")]),t._v(" "),a("li",[t._v("返回值是否要成为const（为什么？）， 看返回值类型是否是需要const不允许变动(防止用户自身的村务使用， 不放弃高效性)， 其次是避免成为左值被修改；")])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回一个const， 这种操作就是不合法的；")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ol",{attrs:{start:"6"}},[a("li",[a("p",[t._v("mutable释放掉non-static成员变量的bitwise constness约束；")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CTextBlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    \tstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("size_t "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mutable")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("size_t textLength"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这些变量可能总是会被改变")]),t._v("\n\t    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mutable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" lengthIsValis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在length()中， 会频繁改变上述的两个变量；  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("Key:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("将某些东西声明为const可帮助编译器侦测出错误用法。const可被施加于任何作用域内的对象、函数参数、函数返回类型、成员函数本体。")])]),t._v(" "),a("li",[a("p",[t._v("编译器强制实施bitwise constness，但你编写程序时应该使用“概念上的常量性”（conceptual constness）。")])]),t._v(" "),a("li",[a("p",[t._v("当const和non-const成员函数有着实质等价的实现时(确实是要有两个版本)，令non-const版本调用const版本可避免代码重复。因为const可以兼容non-const的输入， 但是non-const不可以兼容const的输入")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TextBlock")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("size_t position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do bounds checking")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// log access data")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// verify data integrity")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("size_t position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do bounds checking")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// log access data")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// verify data integrity")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("position"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])])])])])])])]),t._v(" "),a("h3",{attrs:{id:"item04-make-sure-that-objects-are-initialized-before-they-re-used-对象在使用前已先被初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item04-make-sure-that-objects-are-initialized-before-they-re-used-对象在使用前已先被初始化"}},[t._v("#")]),t._v(" Item04：Make sure that objects are initialized before they're used.      对象在使用前已先被初始化")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("没有初始化的值，在读它的时候会导致不明确的行为， 变量里面包含的内容都是半随机状态；")])]),t._v(" "),a("li",[a("p",[t._v("在初始化列表里面， 列出所有的成员变量， 免得遗漏， 除非记得住哪些不用初始值；")]),t._v(" "),a("ol",[a("li",[t._v("实在太多的话， 用一个private函数包一下能够赋值处理的， 也可以；")]),t._v(" "),a("li",[t._v("初始化的顺序总是按照声明顺序来， 不是按照初始化列表的顺序")])])]),t._v(" "),a("li",[a("p",[t._v("成员变量是const或者reference， 就一定要初始化， 因为后面不能再被赋值了；")])]),t._v(" "),a("li",[a("p",[t._v("如果有一个non-local static对象， 没有办法保证是否使用的时候已经初始化， 那就在本地搞一个static函数（处理static对象的函数叫做static的函数）把这个对象包起来，返回一个指向这个对象的reference， 这样， 外部的static对象就变成了本地的static对象， 这也是singleton模式的一个常见实现手法（这种手法叫做reference returning）")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("Directory"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tempDir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" Directory"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" td"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// more effective c++里面， 限制对象数目的方式， 好像是一样的")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" td"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 还是把non-loca的static的对象，改变成local static的对象比较好；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("任何一种non const static 对象，在多线程环境下， 都会有线程安全的问题；non const代表了可以被改变， 多线程可以同时改变它；")])])]),t._v(" "),a("h2",{attrs:{id:"构造-析构-和重载赋值运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造-析构-和重载赋值运算符"}},[t._v("#")]),t._v(" 构造，析构， 和重载赋值运算符")]),t._v(" "),a("h3",{attrs:{id:"item05-know-what-functions-c-silently-writes-and-calls-了解c-默默编写并调用哪些函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item05-know-what-functions-c-silently-writes-and-calls-了解c-默默编写并调用哪些函数"}},[t._v("#")]),t._v(" Item05：Know what     functions C++silently writes and calls. 了解C++默默编写并调用哪些函数")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[t._v("C++ 自动生成的ctor，dtor， copy assignment（op=重载），(big three, 除此之外还有移动构造， 移动赋值， 不过这需要自己的写）")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Empty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Empty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t    Empty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Empty"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Empty e1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Empty "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("e2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    e2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("ol",[a("li",[a("p",[t._v("默认的构造， 析构函数， 只能是浅复制， 值的复制， 如果有指针， 只能指向同一个地址， 而不能有两份内存出来；")])]),t._v(" "),a("li",[a("p",[t._v("对const成员变量， reference变量， 自动生成的copy assignment是不能对这些东西进行赋值和拷贝操作的")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Timekeeper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Timekeeper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TimeKeeper")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("经验： class里面如果有一个virtual的函数， 就为这个类弄一个virtual的析构函数；")])]),t._v(" "),a("li",[a("p",[t._v("纯虚函数？纯虚函数会带来一个抽象基类， 抽象基类不能实例化；但是抽象基类要有一个纯虚的析构函数，需要在H文件里面单独提供一份定义；这样在析构的时候就不会显式运行到在这个纯虚函数；")]),t._v(" "),a("p",[t._v("让其他的子类在析构的时候， 会使用到子类自己的析构函数， 而不是默认的析构， 或者是纯虚基类的析构（纯虚基类的纯虚析构函数， 是空的）")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AWOV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("virtual")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AWOV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AMOV")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AMOV")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在.h文件里面单独提供一份定义， 因为虽然是纯虚函数， 但是子类在析构的时候，还是会调用到这个")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])])]),t._v(" "),a("h3",{attrs:{id:"item06-explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want-若不想使用编译器自动生成的函数-就该明确拒绝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item06-explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want-若不想使用编译器自动生成的函数-就该明确拒绝"}},[t._v("#")]),t._v(" Item06：Explicitly     disallow the use of compiler-generated functions you do not want. 若不想使用编译器自动生成的函数，就该明确拒绝")])]),t._v(" "),a("li",[a("p",[t._v("如何拒绝使用这些自动生成的函数，")]),t._v(" "),a("ol",[a("li",[t._v("使用=delete来禁止使用拷贝构造， 拷贝赋值，")]),t._v(" "),a("li",[t._v("以前在没有=delete关键字的时候， 可以把这些函数放在private里面")])]),t._v(" "),a("h3",{attrs:{id:"item07-declare-destructors-virtual-in-polymorphic-base-classes-为多态基类声明virtual析构函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item07-declare-destructors-virtual-in-polymorphic-base-classes-为多态基类声明virtual析构函数"}},[t._v("#")]),t._v(" Item07：Declare destructors virtual in polymorphic base classes. 为多态基类声明virtual析构函数")])]),t._v(" "),a("li",[a("p",[t._v("多态基类的析构函数最好弄成virtual的， 如果是non-virtual的，那么借由基类指针传进来的对象， 析构的时候， 派生出来的部分会被漏掉")]),t._v(" "),a("ol",[a("li",[t._v("如果析构函数不是virtual的， 那么delete基类指针来进行析构的话。derived部分偶尔会被遗漏掉；")]),t._v(" "),a("li",[t._v("为什么不是virtual的构造函数？因为我们构造的时候， 基本上都是用derived类来进行构造的；")])]),t._v(" "),a("p",[t._v("问题： 对于virtual function， 如何进行派生使用， 如何借由virtual函数来进行多态？")]),t._v(" "),a("h3",{attrs:{id:"item08-prevent-exceptions-from-leaving-destructors-别让异常逃离析构函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item08-prevent-exceptions-from-leaving-destructors-别让异常逃离析构函数"}},[t._v("#")]),t._v(" Item08：Prevent     exceptions from leaving destructors. 别让异常逃离析构函数")])]),t._v(" "),a("li",[a("p",[t._v("析构函数不要吐出异常（别让异常逃离析构函数）, "),a("strong",[t._v("为什么?")])]),t._v(" "),a("ol",[a("li",[t._v("如果不处理异常， 会带来一些不明确的行为， 或者程序半路断掉")]),t._v(" "),a("li",[t._v("所以要好好善后；怎么办，如果析构函数真的抛出异常， 就在析构函数里面进行try{} catch{} , 要么记录下来，立即停止程序，不重要的异常可以不停下来， 让程序继续进行；也可以用单独的函数来处理异常， 但总之就是在类内部， 处理好异常， 不要让异常逃出析构， 这样可以封装得更完整")])])])]),t._v(" "),a("h3",{attrs:{id:"item09-never-call-virtual-functions-during-construction-or-destruction-绝不在构造和析构过程中调用virtual函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item09-never-call-virtual-functions-during-construction-or-destruction-绝不在构造和析构过程中调用virtual函数"}},[t._v("#")]),t._v(" Item09：Never call virtual functions during construction or destruction. 绝不在构造和析构过程中调用virtual函数")]),t._v(" "),a("ol",{attrs:{start:"9"}},[a("li",[a("p",[t._v("构造和析构函数中， 不要调用virtual函数， "),a("strong",[t._v("为什么?")]),t._v("， "),a("strong",[t._v("static函数相关的使用场景和效果？")])]),t._v(" "),a("ol",[a("li",[t._v("构造的时候， derived对象还没有生成， 所以这个时候还用不到自身特化的virtual function， 只能用base class里面的版本；")]),t._v(" "),a("li",[t._v("析构的时候， 只要一开始析构， 对象内的derived class成员变量就是未定义值， 所以这个时候virtual function还是会跑到父类里面去；")]),t._v(" "),a("li",[t._v("父类里面的static函数， 有什么作用？ 是在函数编译的时候， 放在什么段里面？（很大程度和python的static method类似， 能通过类名调用）\nstatic函数里面不能调用non-static成员变量， 也不能调用non-static成员函数; static函数没有"),a("em",[t._v("this指针")])])])])]),t._v(" "),a("h3",{attrs:{id:"item10-have-assignment-operators-return-a-reference-to-this-令operator-返回一个-reference-to-this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item10-have-assignment-operators-return-a-reference-to-this-令operator-返回一个-reference-to-this"}},[t._v("#")]),t._v(" Item10：Have assignment     operators return a reference to*this. 令operator=返回一个     reference to *this")]),t._v(" "),a("ol",{attrs:{start:"10"}},[a("li",[a("p",[t._v("operator= 最好是返回一个 reference to *this,")]),t._v(" "),a("ol",[a("li",[t._v("因为这样可以拥有连续赋值的特性， 例如： x = y = z = 15")])])]),t._v(" "),a("li",[a("h3",{attrs:{id:"item11-handle-assignment-to-self-in-operator-在operator-中判断-自我赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item11-handle-assignment-to-self-in-operator-在operator-中判断-自我赋值"}},[t._v("#")]),t._v(" Item11：Handle assignment to self in operator=. 在operator=中判断“自我赋值”")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" Widget"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" pb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tpb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bitmap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h3",{attrs:{id:"item12-copy-all-parts-of-an-object-复制对象时勿忘其每一个成分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item12-copy-all-parts-of-an-object-复制对象时勿忘其每一个成分"}},[t._v("#")]),t._v(" Item12：Copy all parts of an object. 复制对象时勿忘其每一个成分")])]),t._v(" "),a("li",[a("p",[t._v("自定义"),a("strong",[t._v("拷贝构造")]),t._v("函数的时候， 要复制所有local的变量， 可以使用基类的一些拷贝构造函数对一些成员拷贝；")]),t._v(" "),a("p",[t._v("因为有一些基类对象的拷贝， 必须要通过"),a("strong",[t._v("基类的拷贝构造")]),t._v("函数来进行深度拷贝；")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("PriorityCustomer"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" PriorityCustomer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("logCall")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"......"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Customer"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里直接调用了base class的拷贝构造函数来进行；")]),t._v("\n    priority "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("priority"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("不要使用copy assignment 来调用copy constructor; 反过来也不建议， 因为这就像对一个构造好的对象进行操作， 先有鸡还是先有蛋？")]),t._v(" "),a("p",[t._v("最终还是要将他么共同的一些实际操作放到函数里面， 因为只要使用上面两种函数， 都会要实现构造一个临时的对象， 但对象在这些函数运行过程中都是没有构造好的；")])])]),t._v(" "),a("h2",{attrs:{id:"resource-management-资源管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resource-management-资源管理"}},[t._v("#")]),t._v(" Resource Management， 资源管理")]),t._v(" "),a("h2",{attrs:{id:"item13-以对象管理资源-use-objects-to-manage-resources"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item13-以对象管理资源-use-objects-to-manage-resources"}},[t._v("#")]),t._v(" Item13：以对象管理资源 Use objects to   manage resources.")]),t._v(" "),a("ol",{attrs:{start:"13"}},[a("li",[a("p",[t._v("用对象的形式管理资源 (RAII， Resource Acquisition Is Initialization)，所以要特别注意构造和析构函数，在使用对象的时候可以使用shared_ptr之类的智能指针来管理每个对象的实例；")]),t._v(" "),a("ol",[a("li",[t._v("返回没有加工的指针， 容易造成资源泄露， 忘记delete")]),t._v(" "),a("li",[t._v("手动释放资源， 可能会跑不到释放的那个地方， 也有可能造成double release；")]),t._v(" "),a("li",[t._v("不要多个auto_ptr()指向同一个对象， 不然对象可能会被多次删除， 程序就会有未定义行为；")]),t._v(" "),a("li",[t._v("使用factory设计模式来供给需要的Invest对象")]),t._v(" "),a("li",[t._v("copy assignment要让原来的指针变成null")]),t._v(" "),a("li",[t._v("使用reference counting smart pointer, 使用"),a("strong",[t._v("shared_ptr()")]),t._v(" 相关的实现；")])])])]),t._v(" "),a("h3",{attrs:{id:"item14-在资源管理类中小心copying行为-think-carefully-about-copyingbehavior-in-resource-managing-classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item14-在资源管理类中小心copying行为-think-carefully-about-copyingbehavior-in-resource-managing-classes"}},[t._v("#")]),t._v(" Item14：在资源管理类中小心copying行为 Think     carefully about copyingbehavior in resource-managing classes.")]),t._v(" "),a("ol",{attrs:{start:"14"}},[a("li",[a("p",[t._v("虽然都是RAII原则， 但是要特别注意拷贝构造的行为，")]),t._v(" "),a("ol",[a("li",[t._v("一些复制行为明显是没有意义， 不合理的， 书里面用linux中的mutex的lock和unlock函数来举例子， 这个时候要禁止复制的行为；--\x3e uncopyable(陈硕muduo库里面， 好像也有类似的指定操作)， 或者把这些copy assignment设为private或者=delete")]),t._v(" "),a("li",[t._v("底层资源使用reference-count的方式；")]),t._v(" "),a("li",[t._v("要清楚自己做的是深拷贝还是浅拷贝，要确保自己是在做深拷贝， 不仅拷贝指针， 也拷贝指针所指的内存块；")]),t._v(" "),a("li",[t._v("有时候拷贝其实是一种转移， 要确保系统中给目前只有这一个对象， 从一个地方转移到另外一个地方--\x3e auto_ptr， shared_ptr(), 对这些指针的内部构造要很熟悉。【rebuild the auto ptr code demo】")]),t._v(" "),a("li",[t._v("自动生成的拷贝函数不一定能够满足需求；")])])])]),t._v(" "),a("h3",{attrs:{id:"item15-在资源管理类中提供对原始资源的访问-provide-access-to-raw-resources-in-resource-managing-classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item15-在资源管理类中提供对原始资源的访问-provide-access-to-raw-resources-in-resource-managing-classes"}},[t._v("#")]),t._v(" Item15：在资源管理类中提供对原始资源的访问 Provide access to raw resources in resource-managing classes.")]),t._v(" "),a("ol",{attrs:{start:"15"}},[a("li",[a("p",[t._v("资源管理类中， 提供对原始资源的访问接口， 例如x.get， get_instance这种接口, 让类有接口返回内部资源")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("返回数字，")])]),t._v(" "),a("li",[a("p",[t._v("返回一个instance")])]),t._v(" "),a("li",[a("p",[t._v("singleton的设计模式是怎么做的?")])]),t._v(" "),a("li",[a("p",[t._v("factory模式是怎么做的？")])]),t._v(" "),a("li",[a("p",[t._v("操作符重载, 这是一种隐式转换的方法， 客户使用起来比较方便，但是显示转换会比较安全（使用xxxx.get()的模式）")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Font")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FontHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//也可以重载类型转换函数；")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])])])])])]),t._v(" "),a("h3",{attrs:{id:"item16-成对使用new和delete时要采取相同形式-use-the-same-form-in-corresponding-uses-of-new-and-delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item16-成对使用new和delete时要采取相同形式-use-the-same-form-in-corresponding-uses-of-new-and-delete"}},[t._v("#")]),t._v(" Item16：成对使用new和delete时要采取相同形式 Use the same form in corresponding uses of new and delete.")]),t._v(" "),a("ol",{attrs:{start:"16"}},[a("li",[a("p",[t._v("new和delete使用的时候要成对使用， 并且注意区别数组和对象的delete")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" stringPtr1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" stringPtr2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" stringPtr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除一个对象， 一个指针；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" stringPtr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除一个数组， 一块内存")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ul",[a("li",[t._v("operator new, new operator的区别？")]),t._v(" "),a("li",[t._v("placement new / new placement区别？[item49之后有一些解释]")])]),t._v(" "),a("h3",{attrs:{id:"item17-以独立语句将newed对象置入智能指针-store-newed-objects-in-smart-pointers-in-standalone-statements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item17-以独立语句将newed对象置入智能指针-store-newed-objects-in-smart-pointers-in-standalone-statements"}},[t._v("#")]),t._v(" Item17：以独立语句将newed对象置入智能指针 Store newed objects in smart pointers in standalone statements.")])]),t._v(" "),a("li",[a("p",[t._v("要保证new这个语句是单独执行的， 先于智能指针的赋值操作；")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("processWidget")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("tr1"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shared_ptr")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("priority")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 万一priority()这个函数抛出执行异常会怎样？")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用一个单独的语句来构造shared_ptr变量; 保证这行代码是单独执行的;")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("tr1"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("shared_ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" Widget"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("processWidget")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("priority")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])])]),t._v(" "),a("h2",{attrs:{id:"design-and-declarations-设计与声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#design-and-declarations-设计与声明"}},[t._v("#")]),t._v(" Design and Declarations, 设计与声明")]),t._v(" "),a("h3",{attrs:{id:"item18-让接口容易被正确使用-不易被误用-make-interfaces-easy-to-usecorrectly-and-hard-to-use-incorrectly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item18-让接口容易被正确使用-不易被误用-make-interfaces-easy-to-usecorrectly-and-hard-to-use-incorrectly"}},[t._v("#")]),t._v(" Item18：让接口容易被正确使用，不易被误用 Make interfaces easy to usecorrectly and hard to use incorrectly.")]),t._v(" "),a("ol",{attrs:{start:"18"}},[a("li",[t._v("接口设计简明， 不要让用户对其有歧义\n"),a("ol",[a("li",[a("p",[t._v("建立新类型，限制类型上的操作， 束缚对象值，消除客户的资源管理责任, 一个new type的案例,(enum会带来类型安全的问题? 什么是类型安全?)")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" Month "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Jan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//见下文为什么使用函数，不使用对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" Month "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Feb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" Month "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Dec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("explicit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Month")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//explicit禁止参数隐式转换，private禁止用户生成自定义的月份")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nDate "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("d")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Month")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Mar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Day")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1995")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//正确")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("好好设计程序的类型系统， 使用class， template， typedef， struct， enum等等(类型系统的C++最佳实践方式?)")])])])])]),t._v(" "),a("h3",{attrs:{id:"item19-设计class犹如设计type-treat-class-design-as-type-design"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item19-设计class犹如设计type-treat-class-design-as-type-design"}},[t._v("#")]),t._v(" Item19：设计class犹如设计type Treat class design as type design.")]),t._v(" "),a("ol",{attrs:{start:"19"}},[a("li",[a("p",[a("strong",[t._v("设计class的时候， 就好比设计type（一系列要注意的事项）")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("新类型的对象要如何创建和销毁?")])])]),t._v(" "),a("p",[t._v("这决定了要如何写构造函数和析构函数，包括要使用什么内存分配和释放函数，即new还是new[]，delete还是delete[]，见"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/74067275",target:"_blank",rel:"noopener noreferrer"}},[t._v("第16章"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("对象初始化要如何区别于赋值?")])])]),t._v(" "),a("p",[t._v("这决定了你如何写，如何区别构造函数和赋值运算符，以及不要把初始化与赋值混淆，因为它们的语义不同，构造函数适用于未创建的对象，赋值适用于已创建的对象，这也是为什么我们要在构造函数中使用初始化列表而不使用赋值的原因，见"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/64141116",target:"_blank",rel:"noopener noreferrer"}},[t._v("第4章"),a("OutboundLink")],1),t._v("和"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/68633893",target:"_blank",rel:"noopener noreferrer"}},[t._v("第12章"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("新类型的对象传值有什么意义?")])])]),t._v(" "),a("p",[t._v("要记住拷贝构造函数决定了你的类型是如何被传值的，因为传值会生成本地的拷贝。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("新类型的合法数值有什么限制?")])])]),t._v(" "),a("p",[t._v("通常情况下，并不是成员的任何数值组合都是合法的。要让数据成员合法，我们需要根据合法的组合，在成员函数中对数值进行检测，尤其是构造函数，赋值运算符和setter。这也会影响到使用它的函数会抛出什么异常。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("新类型属于某个继承层次吗?")])])]),t._v(" "),a("p",[t._v("如果你的新类型继承自某个已有的类，你的设计将被这些父类影响到，尤其是父类的某些函数是不是虚函数。如果你的新类型要作为一个父类，你将要决定把哪些函数声明为虚函数，尤其要注意析构函数，见"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/65257902",target:"_blank",rel:"noopener noreferrer"}},[t._v("第7章"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("新类型允许什么样的转换?")])])]),t._v(" "),a("p",[t._v("新类型的对象将会在程序的海洋中与其它各种各样的类型并用，这时你就要决定是否允许类型的转换。如果你希望把T1隐式转换为T2，你可以在T1中定义一个转换函数，例如operator T2，或者在T2中定义一个兼容T1的不加explicit修饰的构造函数。")]),t._v(" "),a("p",[t._v("如果希望使用显式转换，你要定义执行显示转换的函数，详见"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/73563364",target:"_blank",rel:"noopener noreferrer"}},[t._v("第15章"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("什么运算符和函数对于你的新类型是有意义的?")])])]),t._v(" "),a("p",[t._v("这决定了你要声明哪些函数，包括成员函数，非成员函数，友元函数等。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("你要禁止哪些标准函数?")])])]),t._v(" "),a("p",[t._v("如果不希望使用编译器会自动生成的标准函数，把它们声明为私有，见"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/64638672",target:"_blank",rel:"noopener noreferrer"}},[t._v("第6章"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("谁可以接触到成员?")])])]),t._v(" "),a("p",[t._v("这影响到哪些成员是公有的，哪些是保护的，哪些是私有的。这也能帮你决定哪些类和函数是友元的，以及要不要使用嵌套类(nested class)。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v('新类型的"隐藏接口"是什么?')])])]),t._v(" "),a("p",[t._v("新类型对于性能，异常安全性，资源管理(例如锁和内存)有什么保障? 哪些问题是自动解决不需要用户操心的? 要实现这些保障，自然会对这个类的实现产生限制，例如要使用智能指针而不要使用裸指针。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("新类型有多通用?")])])]),t._v(" "),a("p",[t._v("如果想让你的新类型通用于许多类型，定义一个类模板(class template)，而不是单个新类型。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("新类型真的是你需要的吗?")])]),t._v(" "),a("p",[t._v("如果定义一个子类只是为了给基类增加某些新功能，定义一些非成员的函数或者函数模板更加划算。")])]),t._v(" "),a("li",[a("p",[t._v("如何创建和销毁， operator new, operator new[]. operator delete, operator delete[],")])]),t._v(" "),a("li",[a("p",[t._v("对象初始化和对象的赋值有什么区别？ copy constructor 和copy assignment之间有什么区别？")])])])])]),t._v(" "),a("p",[t._v("对一个新对象来说， pass by value意味着什么？因为要重载操作符， 函数， 和重载内存的分配和归还，")]),t._v(" "),a("p",[t._v("type cast的我呢提要怎么处理， 类型转换函数， operator T")]),t._v(" "),a("h3",{attrs:{id:"item20-宁以pass-by-reference-to-const替换pass-by-value-prefer-pass-by-reference-to-const-to-pass-by-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item20-宁以pass-by-reference-to-const替换pass-by-value-prefer-pass-by-reference-to-const-to-pass-by-value"}},[t._v("#")]),t._v(" Item20：宁以pass-by-reference-to-const替换pass-by-value     Prefer pass-by-reference-to-const to pass-by-value.")]),t._v(" "),a("ol",{attrs:{start:"20"}},[a("li",[a("p",[t._v("函数的参数使用pass by reference to const替换pass by value，（内置类型， 其实pass by value也比较合适）")]),t._v(" "),a("ol",[a("li",[t._v("效率会比较高, 因为pass by value会产生临时对象, 对于非内置类型, 会调用copy constructor来进行构造")]),t._v(" "),a("li",[t._v("pass by reference to const 实际上传递的是指针, 能够支持继承类的多态特性.")]),t._v(" "),a("li",[t._v("内置类型, STL迭代器和一些函数对象, 其实pass by value并不昂贵")])]),t._v(" "),a("h3",{attrs:{id:"item21-必须返回对象时-别妄想返回其reference-don-t-try-to-return-a-reference-when-you-must-return-an-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item21-必须返回对象时-别妄想返回其reference-don-t-try-to-return-a-reference-when-you-must-return-an-object"}},[t._v("#")]),t._v(" Item21：必须返回对象时，别妄想返回其reference     Don't try to return a reference when you must return an object.")])]),t._v(" "),a("li",[a("p",[t._v("如果必须返回一个对象，  不要返回他的reference， 因为可能会返回一个local的对象，local对象的renference是没有用的；")]),t._v(" "),a("h3",{attrs:{id:"item22-将成员变量声明为private-declare-data-members-private"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item22-将成员变量声明为private-declare-data-members-private"}},[t._v("#")]),t._v(" Item22：将成员变量声明为private Declare     data members private.")])]),t._v(" "),a("li",[a("p",[t._v("成员变量声明为private")]),t._v(" "),a("ol",[a("li",[t._v("public成员全部都是函数, 有利于语法一致性")]),t._v(" "),a("li",[t._v("使用函数来对成员变量进行精确的访问控制， 这样能够给类更好的封装性")]),t._v(" "),a("li",[t._v("protect成员其实也是没有封装的, 因为如果在后续版本的代码里面,删除了这个protect成员, 其子类一样也需要修改")])]),t._v(" "),a("h3",{attrs:{id:"item23-宁以non-member、non-friend替换member函数-prefer-non-member-non-friend-functions-to-member-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item23-宁以non-member、non-friend替换member函数-prefer-non-member-non-friend-functions-to-member-functions"}},[t._v("#")]),t._v(" Item23：宁以non-member、non-friend替换member函数     Prefer non-member non-friend functions to member functions.")])]),t._v(" "),a("li",[a("p",[t._v("使用non member, non friend来替换member函数")]),t._v(" "),a("ol",[a("li",[t._v("对于private成员, 能够接触它的就是成员函数+友元函数")]),t._v(" "),a("li",[t._v("为的是增加封装性， 增加扩充的弹性，可以使用一个完全的第三方全局的function来进行, 称之为便携函数;")]),t._v(" "),a("li",[t._v("可以把这个全局函数放在一个命名空间里面， 稍微约束一下它的作用域")])]),t._v(" "),a("h3",{attrs:{id:"item24-若所有参数皆需类型转换-请为此采用non-member函数-declarenon-member-functions-when-type-conversions-should-apply-to-all-parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item24-若所有参数皆需类型转换-请为此采用non-member函数-declarenon-member-functions-when-type-conversions-should-apply-to-all-parameters"}},[t._v("#")]),t._v(" Item24：若所有参数皆需类型转换，请为此采用non-member函数 Declarenon-member functions when type conversions should apply to all parameters.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("如果某个函数所有的参数都需要类型转换， 这个函数必须弄成non merber函数")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("隐式转换总体上会给程序带来隐患，因为如果出现了类型错误，编译器是不会报错的。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("只有在参数表里出现的参数才可以进行隐式转换")]),t._v("。例如operator*()这个函数, 局部的重载, 其实只能是X * 2这种形式, 但如果是要支持2 * x这种, 就需要全局的operator*()函数来支持;")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rational")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rational "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rational"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" lhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 成员函数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oneHalf "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//编译通过")]),t._v("\nresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" oneHalf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//编译错误")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rational")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rational "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rational"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" lhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Rational"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rational")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("numerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("numerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                  lhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("denominator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("denominator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//作为非成员函数, 两个参数都需要支持隐式转换")]),t._v("\nRational "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("oneFourth")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nRational result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" oneFourth "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可以编译")]),t._v("\nresult "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" oneFourth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可以编译")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])])])]),t._v(" "),a("h3",{attrs:{id:"item25-考虑写出一个不抛异常的swap函数-consider-support-for-a-non-throwing-swap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item25-考虑写出一个不抛异常的swap函数-consider-support-for-a-non-throwing-swap"}},[t._v("#")]),t._v(" Item25：考虑写出一个不抛异常的swap函数 Consider support for a non-throwing swap.")])]),t._v(" "),a("li",[a("p",[t._v("给自己的类写的swap函数，不要抛出异常， 这是为了和STL库一样支持swap的异常安全；")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("friend可以方位private变量和函数；")])]),t._v(" "),a("li",[a("p",[t._v("使用"),a("strong",[t._v("pimpl")]),t._v('(the "pimpl" idiom，即"pointer to implementation"), 这样一来，要调换两个对象，直接交换指针就行了')]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这个类包含Widget类的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WidgetImpl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//高成本拷贝警告！")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用pimpl手法的类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Widget")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Widget")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//赋值运算符的实现见ch 10,11,12")]),t._v("\n    Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pImpl "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pImpl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    WidgetImpl"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pImpl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用pimpl指针来指向我们的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("如果默认的std::swap不会对效率产生比较大的影响，例如对象的成员数据不多，直接使用是没有问题的，就不用大费周章搞这些了")]),t._v(" "),a("p",[t._v("如果默认的std::swap会对你的函数/类模板产生效率影响: 给你的类使用pimpl手法，然后给它写一个只交换指针的swap成员函数，而且这个函数禁止抛出异常，然后:")]),t._v(" "),a("p",[t._v("对于类模板，要在类模板相同的名空间下写一个自定义的swap，在里面调用swap成员函数")]),t._v(" "),a("p",[t._v("对于类(不是类模板)，还要给std::swap进行特殊化，也在它里面调用swap成员函数")]),t._v(" "),a("p",[t._v("调用swap的时候确保加上using语句来让std名空间里面的swap对编译器可见，然后swap函数前不要加任何名空间资格限制(qualification)")])]),t._v(" "),a("li",[a("p",[t._v("当默认的std::swap可能会拉低你自己的类的效率时，在自己的类里写一个swap成员函数，而且要保证它不会抛出异常")]),t._v(" "),a("p",[t._v("写了swap成员函数，按照编程惯例还要写一个非成员swap函数，放在类或者类模板的名空间下，用它来调用成员swap函数。对于类(非模板)，还要特殊化std::swap")]),t._v(" "),a("p",[t._v("在调用swap时，要加上一句using std::swap，然后调用时不需要再加任何名空间资格限制,  否则可能会调用到私有的swap函数里面去")]),t._v(" "),a("p",[t._v("为了自定义的类而完全特殊化std模板是没问题的，但千万不要给std里添加任何东西。")]),t._v(" "),a("p",[t._v("再或者, 直接使用类自带的namespace, 来重写swap函数;")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Widget")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("swap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这句稍后解释")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pImpl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pImpl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行真正的swap，只交换指针")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 完全特殊化的std::swap")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Widget"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("swap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])])])])])]),t._v(" "),a("h2",{attrs:{id:"implementations-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementations-实现"}},[t._v("#")]),t._v(" Implementations, 实现")]),t._v(" "),a("h3",{attrs:{id:"item26-尽可能延后变量定义式的出现时间-postpone-variable-definitionsas-long-as-possible"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item26-尽可能延后变量定义式的出现时间-postpone-variable-definitionsas-long-as-possible"}},[t._v("#")]),t._v(" Item26：尽可能延后变量定义式的出现时间 Postpone variable definitionsas long as possible.")]),t._v(" "),a("ol",{attrs:{start:"26"}},[a("li",[a("p",[t._v("延迟变量定义的出现时间， 尽量"),a("strong",[t._v("用到的时候再定义；")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("每当定义一个变量时，就会带来构造和析构的运行成本，因为代码运行到定义时会调用对象的构造函数，当离开作用域时便会调用析构函数。")])]),t._v(" "),a("li",[a("p",[t._v("把它的定义尽量往后推迟，直到我们100%确定要用到:")])]),t._v(" "),a("li",[a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用:")]),t._v("\nstring "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("encrypted")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//替换掉:")]),t._v("\nstring encrypted"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nencrypted "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" password"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("我们不仅仅需要把变量的定义推迟到"),a("strong",[t._v("100%要用到")]),t._v("的地方，还要把它推迟到"),a("strong",[t._v("100%有构造参数可用")]),t._v("的时候。这样做既可以避免不必要的构造和析构过程，也能节省默认构造再赋值的成本。而且这样的代码也更可读，因为变量定义在了真正需要它的环境下。")]),t._v(" "),a("p",[t._v("对于一个变量只在循环里用到，把它定义在循环外面然后每次在里面赋值好，即代码A，还是直接在里面定义呢，即代码B?")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码A，在外面定义")]),t._v("\nWidget w"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  w"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//代码B，在里面定义")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Widget "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("w")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("那么我们就来分析一下A和B各自的运行成本:")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("A"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("个构造 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" n个赋值 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("个析构\nB"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" n个构造 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" n个析构\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("对于赋值成本低于(构造+析构)的类，A是更高效的选择，尤其是当n很大的时候。反之如果赋值成本大于(构造+析构)，B则是更好的选择。但是对象在A的作用域比在B要大，有时是不利于程序的可读性和可维护性的。因此"),a("strong",[t._v("除非")]),t._v("你知道赋值成本低于(构造+析构)，而且这段代码要更注重效率，那么我们应该默认使用B。")])])]),t._v(" "),a("h3",{attrs:{id:"item27-尽量少做转型动作-minimize-casting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item27-尽量少做转型动作-minimize-casting"}},[t._v("#")]),t._v(" Item27：尽量少做转型动作 Minimize casting.")])]),t._v(" "),a("li",[a("p",[t._v("少做cast转型动作， 即使要用也尽量使用C++自己的那四个转型, 这里涉及几种C++形式的转换的作用和相关的优缺点")]),t._v(" "),a("ol",[a("li",[t._v("C++的类型转换有3种方式，C风格，函数风格和C++风格:")])])])]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("expression  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//C风格")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//函数风格")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//C++风格")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("static_cast")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dynamic_cast")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//T必须是指向多态类型的指针或引用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("const_cast")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//T必须是指针或引用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token generic-function"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reinterpret_cast")]),a("span",{pre:!0,attrs:{class:"token generic class-name"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//T必须是指针或引用")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("如果一定要转型， 请放在函数里面， 不要让用户在使用这个函数的时候还要惦记转型的事情；")]),t._v(" "),a("h3",{attrs:{id:"item28-避免返回handles指向对象内部成分-avoid-returning-handles-toobject-internals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item28-避免返回handles指向对象内部成分-avoid-returning-handles-toobject-internals"}},[t._v("#")]),t._v(' Item28：避免返回handles指向对象内部成分 Avoid returning"handles"toobject internals.')]),t._v(" "),a("ol",{attrs:{start:"28"}},[a("li",[a("p",[t._v("避免返回一个handler， 这个handler却有指向对象的内部成分，")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("如果一个函数返回了指向"),a("strong",[t._v("储存在对象外部")]),t._v("的数据成员的引用，即使这个函数声明为了const，调用这个函数的人也能修改这个成员(见"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/63609476",target:"_blank",rel:"noopener noreferrer"}},[t._v("第3章"),a("OutboundLink")],1),t._v("bitwise constness的局限性)")])]),t._v(" "),a("li",[a("p",[t._v("避免返回的是一个空悬的指针；")])]),t._v(" "),a("li",[a("p",[t._v("避免可以使用调用的操作来对函数内部的元素进行修改， 可以指定返回值是一个const， 这样用户就不能修改了；")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rectangle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("   \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//现在返回的是const Point&   ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Point"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("upperLeft")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" pData"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("ulhc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Point"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lowerRight")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" pData"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("lrhc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v('避免返回指向内部成员的"句柄"，包括指针，引用，迭代器。不返回"句柄"能增强封装性，让const函数真正const，也能减少"野句柄"。')])])])])]),t._v(" "),a("h3",{attrs:{id:"item29-为-异常安全-而努力是值得的-strive-for-exception-safe-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item29-为-异常安全-而努力是值得的-strive-for-exception-safe-code"}},[t._v("#")]),t._v(" Item29：为“异常安全”而努力是值得的 Strive for exception-safe code.")]),t._v(" "),a("ol",{attrs:{start:"29"}},[a("li",[a("p",[t._v("注意异常安全， （exceptional C++里面有很多异常安全的相关介绍）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("异常安全")]),t._v(" "),a("blockquote",[a("p",[a("em",[a("strong",[t._v("异常安全***的意思就是，"),a("em",[a("strong",[t._v("当程序在异常发生的时候，程序可以回退的很干净")])]),t._v("。什么是回退的很干净呢？其实就是函数在发生异常的时候***不会泄露资源***或者***不会发生任何数据结构的破坏")])]),t._v("。")])]),t._v(" "),a("p",[t._v("不泄露任何资源")]),t._v(" "),a("p",[t._v("不允许破坏任何数据")])])])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("异常安全的函数即使在抛出异常时也不会泄露资源，损坏数据结构。这种安全性有三种级别，基本保证，强保证和不抛出保证")]),t._v(" "),a("ul",[a("li",[t._v("提供"),a("strong",[t._v("基本保证")]),t._v("(basic guarantee)的函数可以保证即使抛出了异常，函数也能在有效的状态下运行，没有对象或数据损坏，所有对象也保持内部一致，依然满足类不变量(class invariant)，但是程序本身则可能处于不确定状态。例如用户使用我们changeBackground方法时抛出了异常，PrettyMenu对象可能依然持有原来的背景，或者持有默认的背景，但具体哪个则是不确定的。")]),t._v(" "),a("li",[t._v("提供"),a("strong",[t._v("强保证")]),t._v("(strong guarantee)的函数可以保证如果函数抛出了异常，程序的状态不会改变。这就意味着对强保证函数的调用是原子性的(atomic)，如果成功了就成功了，如果失败了就像什么都没有发生一样。强保证函数比基本保证函数更容易使用，因为强保证函数只能导致两种状态，成功或者不变，而基本保证的函数可能引向任何状态。")]),t._v(" "),a("li",[t._v("提供"),a("strong",[t._v("不抛出保证")]),t._v("(nothrow guarantee)的函数保证永远不会抛出异常。例如所有对于基本类型(int，指针等等)的操作都提供不抛出保证。它是异常安全代码的基础。")])])]),t._v(" "),a("li",[a("p",[t._v("copy and swap是实现强保证的有效方法，但给所有的函数加上强保证显然也不是实际的选择")])]),t._v(" "),a("li",[a("p",[t._v("函数的异常安全性遵循木桶原理，函数的最强安全性取决于它所调用操作的最弱安全性")])])]),t._v(" "),a("h3",{attrs:{id:"item30-透彻了解inlining的里里外外-understand-the-ins-and-outs-of-inlining"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item30-透彻了解inlining的里里外外-understand-the-ins-and-outs-of-inlining"}},[t._v("#")]),t._v(" Item30：透彻了解inlining的里里外外     Understand the ins and outs of inlining.")]),t._v(" "),a("ol",{attrs:{start:"30"}},[a("li",[t._v("对inline的里里外外需要透彻了解；")])]),t._v(" "),a("ul",[a("li",[t._v("尽量inline， 也许compiler就能够执行context相关的inline优化；")]),t._v(" "),a("li",[t._v("定义在类里面的函数， 自动inline")]),t._v(" "),a("li",[t._v("inline会让代码文件变大， 会导致更多的换页行为（paging），降低 i cache的命中率, 如果函数比较小， inline对 icache miss的影响会稍微比较小， 但是inline的函数比较大， 就有可能会得不偿失；")]),t._v(" "),a("li",[t._v("虚函数的inline， 大多都不会生效")]),t._v(" "),a("li",[t._v("inline不仅会导致代码变大， 而且一旦inline的函数发生改变， 所有用到inline function的地方都要重新编译")]),t._v(" "),a("li",[t._v("inline函数一般放在头文件里面， template一般也都是发那个在头文件里面；")]),t._v(" "),a("li",[t._v("template要避免无脑成为一个inline函数， 它的代价是很大的；因为可能程序中很多地方都用到了这个模板")])]),t._v(" "),a("h3",{attrs:{id:"item31-将文件间的编译依存关系降至最低-minimize-compilation-dependencies-between-files"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item31-将文件间的编译依存关系降至最低-minimize-compilation-dependencies-between-files"}},[t._v("#")]),t._v(" Item31：将文件间的编译依存关系降至最低 Minimize compilation dependencies between files.")]),t._v(" "),a("ol",{attrs:{start:"31"}},[a("li",[t._v("尽量减少文件之间的编译依赖关系；不然修改之后编译， 会导致很多部件都一起编译了【缺demo】")])]),t._v(" "),a("ul",[a("li",[t._v("头文件应该仅有声明不要有定义；")]),t._v(" "),a("li",[t._v("可以只有声明， 而没有定义， 这会导致一个方法： 前向声明， 前向声明只是把#include的内容， 放在代码的前面；")]),t._v(" "),a("li",[t._v("一般使用pointer to implementation 和纯虚函数的工厂方法来解决， 前者叫handle class, 后者叫interface class;")])]),t._v(" "),a("h2",{attrs:{id:"继承与面向对象的设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承与面向对象的设计"}},[t._v("#")]),t._v(" 继承与面向对象的设计")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("单一继承与多重继承")])]),t._v(" "),a("li",[a("p",[t._v("public继承，private继承， protected继承")]),t._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token base-clause"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("virtual / non-virtual 继承")])]),t._v(" "),a("li",[a("p",[t._v("成员函数和其他语言特性的影响")]),t._v(" "),a("ul",[a("li",[t._v("缺省参数与virtual函数的影响？")]),t._v(" "),a("li",[t._v("继承如何影响C++函数名臣的查找规则？")]),t._v(" "),a("li",[t._v("设计选项")]),t._v(" "),a("li",[t._v("class行为如果要修改， virtual函数是最佳选择吗？")])])])]),t._v(" "),a("h3",{attrs:{id:"item32-确定你的public继承塑模出is-a关系-make-sure-public-inheritancemodels-is-a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item32-确定你的public继承塑模出is-a关系-make-sure-public-inheritancemodels-is-a"}},[t._v("#")]),t._v(' Item32：确定你的public继承塑模出is-a关系 Make sure public inheritancemodels"is-a."')]),t._v(" "),a("ol",{attrs:{start:"32"}},[a("li",[a("p",[t._v("public继承的时候， 确认两个对象是 is a的关系；多态通过虚函数来完成，")]),t._v(" "),a("ol",[a("li",[t._v("什么时候用虚函数？什么时候用纯虚函数？")])])])]),t._v(" "),a("h3",{attrs:{id:"item33-避免遮掩继承而来的名称-avoid-hiding-inherited-names"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item33-避免遮掩继承而来的名称-avoid-hiding-inherited-names"}},[t._v("#")]),t._v(" Item33：避免遮掩继承而来的名称 Avoid hiding inherited names.")]),t._v(" "),a("ol",{attrs:{start:"33"}},[a("li",[t._v("继承的时候，注意类内部的变量名称是否会被覆盖，")])]),t._v(" "),a("ul",[a("li",[t._v("即使是重载的函数，不管函数接口形式是否一样， 也会被子类的同名函数覆盖")]),t._v(" "),a("li",[t._v("使用using Base::mf3() 可以指定在子类作用域范围里面使用base类的mf3函数，")]),t._v(" "),a("li",[t._v("如果只想使用某一个mf3(),  只能是子类的函数里面， 再调用Base::mf3(); 这种方式叫forward functions;")])]),t._v(" "),a("h3",{attrs:{id:"item34-区分接口继承和实现继承-differentiate-between-inheritance-of-interface-and-inheritance-of-implementation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item34-区分接口继承和实现继承-differentiate-between-inheritance-of-interface-and-inheritance-of-implementation"}},[t._v("#")]),t._v(" Item34：区分接口继承和实现继承 Differentiate     between inheritance of interface and inheritance of implementation.")]),t._v(" "),a("ol",{attrs:{start:"34"}},[a("li",[t._v("什么是接口继承和实现继承？\n"),a("ol",[a("li",[t._v("pure virtual函数的目的就是接口继承， 但是也可以有一份基类实现，调用的时候只能通过子类指定父类名称的方式来调用（纯虚函数必须重写）；")]),t._v(" "),a("li",[t._v("非纯虚函数是为了让子类继承接口 + 缺省实现， 这些都是自动继承的， 如果子类不override 虚函数的话（一般虚函数可以重写， 也可以不重写）；")]),t._v(" "),a("li",[t._v("非虚函数的目的是强制让子类继承一个缺省的实现；（非虚函数，没有多态性，直接继承）")]),t._v(" "),a("li",[t._v("接口和实现继承分开， 也就是把接口用一个纯虚函数来声明， 实现使用一个private或者protected的缺省实现来代替， 这样子类必须要重写纯虚函数，但是可以默认使用缺省的实现；")]),t._v(" "),a("li",[t._v("也可以使用一个虚函数的非虚实现， 然后再在子类里面overide的时候调用这个函数；")])])])]),t._v(" "),a("h3",{attrs:{id:"item35-考虑virtual函数以外的其他选择-consider-alte-rnatives-to-virtual-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item35-考虑virtual函数以外的其他选择-consider-alte-rnatives-to-virtual-functions"}},[t._v("#")]),t._v(" Item35：考虑virtual函数以外的其他选择 Consider alte rnatives to virtual functions.")]),t._v(" "),a("ol",{attrs:{start:"35"}},[a("li",[t._v("除了virtual函数之外，也可以考虑一下其他的选择\n"),a("ol",[a("li",[t._v("通过一个public函数， 调用自己的virtual函数， non-virtual interface（NVI）方法；（模板方法设计模式）， 子类就")]),t._v(" "),a("li",[t._v("借助funciion pointer实现strategy模式")]),t._v(" "),a("li",[t._v("使用各个库里面的function component来实现strategy模式， 例如std::function， 而且这个东西支持任何callable entities，包括运算符重载的struct和class")]),t._v(" "),a("li",[t._v("标准设计模式， 古典的strategy模式， 就是使用pImple的方式来实现strategy， 来代替第一条里面的实现方式")])])])]),t._v(" "),a("h3",{attrs:{id:"item36-绝不重新定义继承而来的non-virtual函数-never-redefine-an-inherited-non-virtual-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item36-绝不重新定义继承而来的non-virtual函数-never-redefine-an-inherited-non-virtual-function"}},[t._v("#")]),t._v(" Item36：绝不重新定义继承而来的non-virtual函数 Never redefine an inherited non-virtual function.")]),t._v(" "),a("ol",{attrs:{start:"36"}},[a("li",[t._v("不要重新定义继承来的non virtual函数， 这其实是一种overloading， 并不能实现多态特性的overide， nonvirtual 函数其实是静态绑定的(dynamic binding)；virtual函数是动态绑定(dynamic binding)")])]),t._v(" "),a("h3",{attrs:{id:"item37-绝不重新定义继承而来的缺省参数值-never-redefine-a-function-s-inherited-default-parameter-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item37-绝不重新定义继承而来的缺省参数值-never-redefine-a-function-s-inherited-default-parameter-value"}},[t._v("#")]),t._v(" Item37：绝不重新定义继承而来的缺省参数值 Never redefine a function's inherited default parameter value.")]),t._v(" "),a("ol",{attrs:{start:"37"}},[a("li",[t._v("不要重新定义继承来的缺省参数值， 因为可能会在调用子类的时候， 用到父类里面这个函数的默认值，（对于通过对象指针， 引用的方式都会有这个问题， 因为默认参数的绑定是一种静态绑定），子类就声明参数就可以了， 不需要有默认值")])]),t._v(" "),a("h3",{attrs:{id:"item38-通过复合塑模出has-a或-根据某物实现出-model-has-a-or-is-implemented-in-terms-of-through-composition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item38-通过复合塑模出has-a或-根据某物实现出-model-has-a-or-is-implemented-in-terms-of-through-composition"}},[t._v("#")]),t._v(' Item38：通过复合塑模出has-a或“根据某物实现出” Model"has-a"or"is-implemented-in-terms-of"through composition.')]),t._v(" "),a("ol",{attrs:{start:"38"}},[a("li",[a("p",[t._v("通过composition实现has a, 或者根据某物实现的关系")]),t._v(" "),a("ol",[a("li",[t._v("要区分， composite和interitate之间的区别（复合与继承之间的关系）")])])])]),t._v(" "),a("h3",{attrs:{id:"item39-明智而审慎地使用private继承-use-private-inheritance-judiciously"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item39-明智而审慎地使用private继承-use-private-inheritance-judiciously"}},[t._v("#")]),t._v(" Item39：明智而审慎地使用private继承 Use     private inheritance judiciously.")]),t._v(" "),a("ol",{attrs:{start:"39"}},[a("li",[t._v("谨慎使用private继承，\n"),a("ol",[a("li",[t._v("编译器不会把一个private继承的子类，自动转换成一个基类")]),t._v(" "),a("li",[t._v("private继承下来的所有成员， 在子类中都会变成private属性")]),t._v(" "),a("li",[t._v("protect继承\n"),a("ol",[a("li",[t._v("默认的基本上都是public继承；")]),t._v(" "),a("li",[t._v("尽可能使用compiosition， 必要的时候再使用private继承")])])])])])]),t._v(" "),a("h3",{attrs:{id:"item40-明智而审慎地使用多重继承-use-multiple-inheritance-judiciously"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item40-明智而审慎地使用多重继承-use-multiple-inheritance-judiciously"}},[t._v("#")]),t._v(" Item40：明智而审慎地使用多重继承 Use multiple inheritance judiciously.")]),t._v(" "),a("ol",{attrs:{start:"40"}},[a("li",[t._v("谨慎使用多重继承（子类从多个父类继承而来）\n"),a("ol",[a("li",[t._v("可能对导致对基类函数调用的歧义，到底调用的是哪一个基类的成员函数？")]),t._v(" "),a("li",[t._v("钻石形继承， 二级基类可以是虚基类(virtual继承)， 这样三级再继承的时候， 就不会重复出现两个爷爷类里面的成员函数了；")]),t._v(" "),a("li",[t._v("virtual继承会带来更多大小，速度，初始化的成本。如果非要有一个virtual base class， 最好不要在虚基类里面放置数据；")]),t._v(" "),a("li",[t._v("有一种情况， 比较适合多重继承，public继承某个interface class， private继承某个协助实现的class；帮助子类实现某些功能。但是还是谨记第一条吧；")])])])]),t._v(" "),a("h2",{attrs:{id:"模板-gp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板-gp"}},[t._v("#")]),t._v(" 模板，GP")]),t._v(" "),a("h3",{attrs:{id:"item41-了解隐式接口和编译期多态-understand-implicit-interfaces-and-compile-time-polymorphism"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item41-了解隐式接口和编译期多态-understand-implicit-interfaces-and-compile-time-polymorphism"}},[t._v("#")]),t._v(" Item41：了解隐式接口和编译期多态 Understand     implicit interfaces and compile-time polymorphism.")]),t._v(" "),a("ol",{attrs:{start:"41"}},[a("li",[t._v("隐式接口和编译期多态（和RTTI的区别？）")])]),t._v(" "),a("h3",{attrs:{id:"item42-了解typename的双重意义-understand-the-two-meanings-of-typename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item42-了解typename的双重意义-understand-the-two-meanings-of-typename"}},[t._v("#")]),t._v(" Item42：了解typename的双重意义 Understand     the two meanings of typename.")]),t._v(" "),a("ol",{attrs:{start:"42"}},[a("li",[t._v("typename和class关键字， typename关键字的双重定义")])]),t._v(" "),a("h3",{attrs:{id:"item43-学习处理模板化基类内的名称-know-how-to-access-names-in-templatized-base-classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item43-学习处理模板化基类内的名称-know-how-to-access-names-in-templatized-base-classes"}},[t._v("#")]),t._v(" Item43：学习处理模板化基类内的名称 Know how to     access names in templatized base classes.")]),t._v(" "),a("ol",{attrs:{start:"43"}},[a("li",[t._v("如何处理模板化基类的里面的名称")])]),t._v(" "),a("h3",{attrs:{id:"item44-将与参数无关的代码抽离templates-factor-parameter-independent-code-out-of-templates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item44-将与参数无关的代码抽离templates-factor-parameter-independent-code-out-of-templates"}},[t._v("#")]),t._v(" Item44：将与参数无关的代码抽离templates Factor     parameter-independent code out of templates.")]),t._v(" "),a("ol",{attrs:{start:"44"}},[a("li",[t._v("参数无关的代码， 抽离template")])]),t._v(" "),a("h3",{attrs:{id:"item45-运用成员函数模板接受所有兼容类型-use-member-function-templates-to-accept-all-compatible-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item45-运用成员函数模板接受所有兼容类型-use-member-function-templates-to-accept-all-compatible-types"}},[t._v("#")]),t._v(' Item45：运用成员函数模板接受所有兼容类型 Use member     function templates to accept"all compatible types."')]),t._v(" "),a("ol",{attrs:{start:"45"}},[a("li",[t._v("使用成员函数模板来接受所有兼容的类型")])]),t._v(" "),a("h3",{attrs:{id:"item46-需要类型转换时请为模板定义非成员函数-define-non-member-functions-inside-templates-when-type-conversions-are-desired"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item46-需要类型转换时请为模板定义非成员函数-define-non-member-functions-inside-templates-when-type-conversions-are-desired"}},[t._v("#")]),t._v(" Item46：需要类型转换时请为模板定义非成员函数 Define     non-member functions inside templates when type conversions are desired.")]),t._v(" "),a("ol",{attrs:{start:"46"}},[a("li",[t._v("需要类型转换的时候， 为模板定义一个非成员函数")])]),t._v(" "),a("h3",{attrs:{id:"item47-请使用traits-classes表现类型信息-use-traits-classes-for-information-about-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item47-请使用traits-classes表现类型信息-use-traits-classes-for-information-about-types"}},[t._v("#")]),t._v(" Item47：请使用traits classes表现类型信息 Use     traits classes for information about types.")]),t._v(" "),a("ol",{attrs:{start:"47"}},[a("li",[t._v("使用traits来表现模板里面的类型信息")])]),t._v(" "),a("h3",{attrs:{id:"item48-认识template元编程-be-aware-of-template-metaprogramming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item48-认识template元编程-be-aware-of-template-metaprogramming"}},[t._v("#")]),t._v(" Item48：认识template元编程 Be aware of     template metaprogramming.")]),t._v(" "),a("ol",{attrs:{start:"48"}},[a("li",[t._v("什么是template元编程")])]),t._v(" "),a("h2",{attrs:{id:"定制new和delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定制new和delete"}},[t._v("#")]),t._v(" 定制new和delete")]),t._v(" "),a("h3",{attrs:{id:"item49-了解new-handler的行为-understand-the-behavior-of-the-new-handler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item49-了解new-handler的行为-understand-the-behavior-of-the-new-handler"}},[t._v("#")]),t._v(" Item49：了解new-handler的行为 Understand  the behavior of the new-handler.")]),t._v(" "),a("ol",{attrs:{start:"49"}},[a("li",[t._v("new handler的行为（处理new失败时候throw的异常）， 底层是怎样构成的？")])]),t._v(" "),a("h3",{attrs:{id:"item50-了解new和delete的合理替换时机-understand-when-it-makes-sense-to-replace-new-and-delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item50-了解new和delete的合理替换时机-understand-when-it-makes-sense-to-replace-new-and-delete"}},[t._v("#")]),t._v(" Item50：了解new和delete的合理替换时机     Understand when it makes sense to replace new and delete.")]),t._v(" "),a("ol",{attrs:{start:"50"}},[a("li",[t._v("operator new和operator delete的合理替换时机；")])]),t._v(" "),a("h3",{attrs:{id:"item51-编写new和delete时需固守常规-adhere-to-convention-when-writing-new-and-delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item51-编写new和delete时需固守常规-adhere-to-convention-when-writing-new-and-delete"}},[t._v("#")]),t._v(" Item51：编写new和delete时需固守常规 Adhere     to convention when writing new and delete.")]),t._v(" "),a("ol",{attrs:{start:"51"}},[a("li",[t._v("operator new和operator delete需要遵循的一些规则")])]),t._v(" "),a("h3",{attrs:{id:"item52-写了placement-new也要写placement-delete-write-placement-delete-if-you-write-placement-new"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item52-写了placement-new也要写placement-delete-write-placement-delete-if-you-write-placement-new"}},[t._v("#")]),t._v(" Item52：写了placement new也要写placement delete Write placement delete if you write placement new.")]),t._v(" "),a("ol",{attrs:{start:"52"}},[a("li",[t._v("placement new和placement delete")])]),t._v(" "),a("h2",{attrs:{id:"一些杂项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些杂项"}},[t._v("#")]),t._v(" 一些杂项")]),t._v(" "),a("h3",{attrs:{id:"item53-不要轻忽编译器的警告-pay-attention-to-compiler-warnings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item53-不要轻忽编译器的警告-pay-attention-to-compiler-warnings"}},[t._v("#")]),t._v(" Item53：不要轻忽编译器的警告 Pay attention to compiler warnings.")]),t._v(" "),a("h3",{attrs:{id:"item54-让自己熟悉包括tr1在内的标准程序库-familiarize-yourself-with-the-standard-library-including-tr1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item54-让自己熟悉包括tr1在内的标准程序库-familiarize-yourself-with-the-standard-library-including-tr1"}},[t._v("#")]),t._v(" Item54：让自己熟悉包括TR1在内的标准程序库     Familiarize yourself with the standard library，including TR1.")]),t._v(" "),a("h3",{attrs:{id:"item55-让自己熟悉boost库-familiarize-yourself-with-boost"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#item55-让自己熟悉boost库-familiarize-yourself-with-boost"}},[t._v("#")]),t._v(" Item55：让自己熟悉Boost库 Familiarize yourself with Boost.")])])}),[],!1,null,null,null);s.default=e.exports}}]);