(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{356:function(t,a,s){"use strict";s.r(a);var e=s(6),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("h2",{attrs:{id:"这部分可以参考高性能c-相关的书籍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#这部分可以参考高性能c-相关的书籍"}},[t._v("#")]),t._v(" , 这部分可以参考高性能C++相关的书籍")]),t._v(" "),s("p",[t._v("与运行时， 虚函数， 以及对象的内存模型相关的知识；")]),t._v(" "),s("h3",{attrs:{id:"item-16-谨记-80-20-法则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#item-16-谨记-80-20-法则"}},[t._v("#")]),t._v(" Item  16：谨记 80-20     法则")]),t._v(" "),s("p",[t._v("要清楚80-20法则， 有时候还是根方效率， 也就是100个人里面， 只有10个人完成了一半的工作， 10000个人里面只有100个人完成了一半的工作；")]),t._v(" "),s("ul",[s("li",[t._v("只有20%代码占用了程序的80%的时间")]),t._v(" "),s("li",[t._v("需要对程序做合理的profile， 找出程序的热点函数")])]),t._v(" "),s("h3",{attrs:{id:"item-17-考虑使用-lazy-evaluation-缓式评估"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#item-17-考虑使用-lazy-evaluation-缓式评估"}},[t._v("#")]),t._v(" Item  17：考虑使用     lazy evaluation（缓式评估）")]),t._v(" "),s("p",[t._v("考虑使用缓式评估（lazy evaluation）: 可避免非必要的对象复制，可区别 operator[]的读取和写动作，可避免非必要的数据库读取动作，可避免非必要的数值计算动作")]),t._v(" "),s("ul",[s("li",[t._v("Laze Fetching：产生Object对象的时候不从数据库里面取出文件，里面字段被用到的时候再取， copy on write;")]),t._v(" "),s("li",[t._v("Lazy Expression Evaluation")]),t._v(" "),s("li",[t._v("用到的时候, 再把需要的中间变量计算出来, 不然过早计算, 可能后面会用不到,")]),t._v(" "),s("li",[t._v("避免不必要的重复冗余计算;")]),t._v(" "),s("li",[t._v("用到的变量, 也是这样, 过早声明定义, 有可能会浪费")])]),t._v(" "),s("h3",{attrs:{id:"item-18-分期摊还预期的计算成本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#item-18-分期摊还预期的计算成本"}},[t._v("#")]),t._v(" Item  18：分期摊还预期的计算成本")]),t._v(" "),s("p",[t._v("分期摊还预期的计算成本")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("SW Cache")])]),t._v(" "),s("li",[s("p",[t._v("Prefetch:")]),t._v(" "),s("blockquote",[s("p",[t._v("你可以把 prefetching 想象是购买大量物品时的一个折扣。例如，磁盘控制器，当它们从磁盘中读取数据时，读的是整个数据块或 sectors——即使程序只需其中少量数据。那是因为一次读一大块数据比分成两三次每次读小块数据，速度上快得多。此外，经验显示，如果某处的数据被需要，通常其邻近的数据也会被需要，这便是有名的 locality of reference 现象（译注：意指被取用的数据有“位置集中”的倾向）。系统设计者依此现象而设计出磁盘缓存（disk caches）、指令与数据的内存缓存（memory caches），以及“指令预先取出（instruction prefetches）”。")])])])]),t._v(" "),s("h3",{attrs:{id:"item-19-了解临时对象的来源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#item-19-了解临时对象的来源"}},[t._v("#")]),t._v(" Item 19：了解临时对象的来源")]),t._v(" "),s("ol",[s("li",[t._v("函数的变量传递（pass by value 或者 pass to reference-to-const）")]),t._v(" "),s("li",[t._v("函数的返回值（return to const极有可能会产生一个临时的对象）")])]),t._v(" "),s("h3",{attrs:{id:"item-20-协助完成-返回值优化-rvo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#item-20-协助完成-返回值优化-rvo"}},[t._v("#")]),t._v(" Item 20：协助完成“返回值优化（RVO）”")]),t._v(" "),s("p",[t._v("协助程序完成返回值优化（RVO）\n在return by value的时候，")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rational")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Rational")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在最后return的语句里面，直接返回实例的表达式， 可以省去在函数体内部多出来的一个临时对象；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"item-21-利用重载技术-overload-避免隐式类型转换-implicit-type-conversions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#item-21-利用重载技术-overload-避免隐式类型转换-implicit-type-conversions"}},[t._v("#")]),t._v(" Item 21：利用重载技术（overload）避免隐式类型转换（implicit type conversions）")]),t._v(" "),s("p",[t._v("overload一个global function来支持不同类型的参数， 从而避免隐式的类型转换")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" UPInt "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" UPInt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"item-22-考虑以操作符复合形式-op-取代其独身形式-op"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#item-22-考虑以操作符复合形式-op-取代其独身形式-op"}},[t._v("#")]),t._v(" Item  22：考虑以操作符复合形式（op=）取代其独身形式（op）")]),t._v(" "),s("p",[t._v("考虑使用操作符复合形式（op=）取代其独立的形式（op）")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("​\t+= 比 + 拥有更少的临时对象，")])]),t._v(" "),s("li",[s("p",[t._v("在类的里面， operator+ 调用operator+=")])]),t._v(" "),s("li",[s("p",[t._v("在类的外面， 全局重载的operator+, 调用了局部的operator+=")])]),t._v(" "),s("li",[s("p",[t._v("在进行操作符重载的时候， 独立形式的操作符也会使用复合形式的操作符重载来完成， 和++a a++一样， 都会有多余的overhead；")])]),t._v(" "),s("li",[s("p",[t._v("返回匿名对象的overhead不会比返回命名对象更多")]),t._v(" "),s("div",{staticClass:"language-cpp line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" T "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    T "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" rhs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])])]),t._v(" "),s("h3",{attrs:{id:"item-23-考虑使用其他程序库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#item-23-考虑使用其他程序库"}},[t._v("#")]),t._v(" Item 23：考虑使用其他程序库")]),t._v(" "),s("p",[t._v("观点在工作执行的时候， 其实不需要考虑很多；")]),t._v(" "),s("p",[t._v("但是反过来论述工作的重要性和优越性的时候， 需要这些角度和观点的切入；")]),t._v(" "),s("p",[t._v("积极使用其他的库，（更快的性能， 更小的代码体积，效率，扩展性，移植性考虑在内）(这里整理一些不错的C++库，可以用来学习， 也可以用来搜集)")]),t._v(" "),s("ul",[s("li",[t._v("基础库")]),t._v(" "),s("li",[t._v("网络库")]),t._v(" "),s("li",[t._v("计算库")]),t._v(" "),s("li",[t._v("存储库")]),t._v(" "),s("li",[t._v("json库")])]),t._v(" "),s("p",[t._v("​\t比如OneDNN / MKL、 libevent， 以及一些网络的库")]),t._v(" "),s("h3",{attrs:{id:"item-24-了解-virtual-functions、multiple-inheritance、virtual-base-classes、runtime-type-identification的成本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#item-24-了解-virtual-functions、multiple-inheritance、virtual-base-classes、runtime-type-identification的成本"}},[t._v("#")]),t._v(" Item  24：了解 virtual functions、multiple inheritance、virtual base classes、runtime type  identification的成本")]),t._v(" "),s("p",[t._v("时间空间成本（主要是对象模型相关的内容）")]),t._v(" "),s("p",[t._v("虚函数，")]),t._v(" "),s("p",[t._v("多重继承，")]),t._v(" "),s("p",[t._v("虚基类，")]),t._v(" "),s("p",[t._v("RTTI")]),t._v(" "),s("p",[t._v("他们的成本代价都是一些什么？")])])}),[],!1,null,null,null);a.default=r.exports}}]);