(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{351:function(s,t,a){"use strict";a.r(t);var n=a(6),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"more-effective-c"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#more-effective-c"}},[s._v("#")]),s._v(" More Effective C++")]),s._v(" "),a("h2",{attrs:{id:"基础议题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础议题"}},[s._v("#")]),s._v(" 基础议题")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("仔细区分pointer和reference")]),s._v(" "),a("ul",[a("li",[s._v("reference 一定得代表某个对象，C++因此要求 references 必须有初值")]),s._v(" "),a("li",[s._v("用 references 可能会比使用pointers 更富效率。这是因为使用 reference 之前不需要测试其有效性, 如果是指针, 需要判断if(pc), 是否是nullptr")]),s._v(" "),a("li",[s._v("Pointers 和 references 之间的另一个重要差异就是，pointers 可以被重新赋值")])])]),s._v(" "),a("li",[a("p",[s._v("最好是使用C++的cast操作(static_cast(), const_cast(), reinterprete_cast(), dynamic_cast())；")]),s._v(" "),a("ul",[a("li",[s._v("static_cast 基本上拥有与 C 旧式转型相同的威力与意义，以及相同的限制。")]),s._v(" "),a("li",[s._v("const_cast 用来改变表达式中的常量性（constness）或变易性（volatileness）")]),s._v(" "),a("li",[s._v("dynamic_cast，用来执行继承体系中“安全的向下转型或跨系转型动作”。也就是说你可以利用 dynamic_cast，将“指向 base class objects的 pointers或 references”转型为“指向 derived（或 sibling base）class objects的 pointers 或 references”，并得知转型是否成功1。")]),s._v(" "),a("li",[s._v("reinterpret_cast转换结果几乎总是与编译平台息息相关。所以 reinterpret_casts 不具移植性。reinterpret_cast 的最常用用途是转换“函数指针”类型。")])])]),s._v(" "),a("li",[a("p",[s._v("不要以多态的方式处理数组， 因为多态的时候, 导致数组里面元素的大小不一样， 在数组里面slicing会导致便偏移错误；")]),s._v(" "),a("p",[s._v("Example:")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[s._v("\t\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("非必要不使用默认的default constructor，\n在一个完美的世界中，凡可以“合理地从无到有生成对象”的 classes，都应该内含 default constructors，而“必须有某些外来信息才能生成对象”的 classes，则不必拥有 default constructors。但我们的世界毕竟不是完美的世界，所以我们必须纳入其他考虑。")]),s._v(" "),a("p",[s._v("如果 class 缺乏一个 default constructor，当你使用这个class 时便会有某些限制。")]),s._v(" "),a("p",[s._v("无意义 default constructors，会影响 classes 效率。member functions 必须检测这个字段是否被初始化， 要花更多的时间和空间（这个类也变大了）；")]),s._v(" "),a("p",[s._v("到底要不要有 default constructor，最后还是要看 virtual base classes （见条款 E43）有关。虚基类必须要有默认的构造函数。因为 virtual base class constructors 的自变量必须由欲产生的对象的派生层次最深（所谓 most derived）的 class 提供。一个缺乏 default constructor的 virtual base class，要求其所有的 derived classes都必须知道、了解其意义，这太难了")])])]),s._v(" "),a("h2",{attrs:{id:"操作符-operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作符-operators"}},[s._v("#")]),s._v(" 操作符（operators）")]),s._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("p",[s._v("自己定制的类型转换函数， 需要保持警惕, 也就是拷贝构造, 拷贝赋值; 允许编译器执行隐式类型转换, 坏处大于好处;")]),s._v(" "),a("ul",[a("li",[s._v("并且主要是一些内建default对类对象的类型转换")]),s._v(" "),a("li",[s._v("因为有一些转换函数， 在一些自己想不到的时候， 会被偶然间调用；")]),s._v(" "),a("li",[s._v("自定义的类型转换,要避免发生隐式类型转换, 它最好只能够非常清晰地从type A到typeB")]),s._v(" "),a("li",[s._v("关键词 explicit。这个特性之所以被导入，就是为了解决隐式类型转换带来的问题。其用法十分直接易懂，只要将 constructors声明为 explicit，编译器便不能因隐式类型转换的需要而调用它们。单一参数的构造函数， 加上explicit")]),s._v(" "),a("li",[s._v("类似 ArraySize 这样的 classes，往往被称为proxy classes，因为它的每一个对象都是为了其他对象而存在的，")]),s._v(" "),a("li",[a("img",{staticStyle:{zoom:"50%"},attrs:{src:"/2_More_Effective_C++.assets/epub_33381011_65.jpeg",alt:"img"}})])])]),s._v(" "),a("li",[a("p",[s._v("区别C++， 和++C这两个操作符重载时候的区别, ++C没有临时变量, C++是有的")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("重载的时候, 前置是operator++(), 后置是operator++(int)， 所以后置的时候， 会用到前置的重构在函数")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" UPInt UPInt"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("opreator"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ++a")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" UPInt UPInt"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("opreator"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\tUPInt oldValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" oldValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a++")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])])])]),s._v(" "),a("li",[a("p",[s._v("不要重载&&，||和，操作符；因为重载这些操作符的参数, 再调用这些重载函数的时候, 都需要已经被计算出来, 但是通常我们在使用这些操作符的时候会把一些没有计算出来的表达式放在里面去做||, &&操作;\nC++并未明确定义函数调用动作中各参数的计算顺序，所以没办法知道 那个变量中的哪个会先被计算出来。")])]),s._v(" "),a("li",[a("p",[a("u",[s._v("对不同含义的new和delete， 需要充分搞清楚区别和含义；[拓展： 侯捷, 内存管理课程]")])]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指针数组")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" bestPractice "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 数组指针")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// new operator:")]),s._v("\nstring "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ps "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Memory management"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),s._v(" ps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//只有new operator出来的内存才能delete， malloc出来的要经过cast成为对象的指针才能够使用delete；")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" ps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果ps是一个数组的话；")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// operator new:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size_t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//可以直接这样使用，像使用malloc一样， 把内存转换成对象是new operator做的事情；")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" rawMemory "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("sizeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\noperater "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("rawMemory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// operator delete")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//placement new")]),s._v("\nWidget"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructWidgetInBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" widgetSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Widget")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("widgetSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"异常-exceptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常-exceptions"}},[s._v("#")]),s._v(" 异常（exceptions）")]),s._v(" "),a("ol",{attrs:{start:"9"}},[a("li",[a("p",[s._v("利用destructor来避免资源的泄露（什么是资源泄露？没有delete的指针）， 最好还是使用智能指针的类来处理会比较好；")]),s._v(" "),a("p",[s._v("要么catch到exception之后， 要及时释放资源， 避免资源泄露；")]),s._v(" "),a("p",[s._v("要么就在destructor里面， 增加资源的释放， 即使遇到异常， 退出的时候也会调用析构函数里面的delete；")]),s._v(" "),a("p",[s._v("使用智能指针， auto_ptr(), shared_ptr(), weak_ptr()")])]),s._v(" "),a("li",[a("p",[s._v("利用constructor来避免资源泄露（最好还是使用智能指针的类比较好）")]),s._v(" "),a("ul",[a("li",[s._v("在构造新对象的过程中， 如果构造失败， 就可能会造成资源泄露")]),s._v(" "),a("li",[s._v("所以要直接在构造函数里面对构造失败的异常进行捕获， 并且处理好这些异常， 对野指针进行delete。")]),s._v(" "),a("li",[s._v("把这些指针的删除， 囊括在一个clean up()的函数里面；")]),s._v(" "),a("li",[s._v("指向const的指针， 只能在初始化列表里面进行初始化， 这些对象的初始化过程中的异常， 可以放在一个private函数里面去进行，")]),s._v(" "),a("li",[s._v("不过最好还是使用auto_ptr之类的东西， 直接去管理类的成员数据， 比较方便一些")]),s._v(" "),a("li",[s._v("由于 C++不自动清理那些“构造期间抛出 exceptions”的对象，所以你必须设计你的 constructors，使它们在那种情况下亦能自我清理。")])])]),s._v(" "),a("li",[a("p",[s._v("别让异常流出destructor;")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("第一，它可以避免 terminate函数在exception传播过程的栈展开（stack-unwinding）机制中被调用；")])]),s._v(" "),a("li",[a("p",[s._v("第二，它可以协助确保 destructors 完成其应该完成的所有事情。")])])])]),s._v(" "),a("li",[a("p",[s._v("弄清楚， 抛出一个异常， 和 传递一个参数之间的区别"),a("img",{attrs:{src:"/2_More_Effective_C++.assets/epub_33381011_142.jpeg",alt:"img"}})])]),s._v(" "),a("li",[a("p",[s._v("以 by reference的方式捕获一个exception; 既没有by value的复制问题 也没有by pointer 的局部对象问题；")]),s._v(" "),a("p",[s._v("by pointer 可能会遇到下面的问题：当ex不是一个global或者是static对象， 而是一个局部对象的时候， 就会出错"),a("img",{attrs:{src:"/2_More_Effective_C++.assets/epub_33381011_148.jpeg",alt:"img"}})])]),s._v(" "),a("li",[a("p",[s._v("明智地运用exception specification"),a("img",{attrs:{src:"/2_More_Effective_C++.assets/epub_33381011_156.jpeg",alt:"img"}})])]),s._v(" "),a("li",[a("p",[s._v("清楚异常处理带来的成本；\n粗略估计，如果使用 try 语句块，代码大约整体膨胀 5%～10%，执行速度亦大约下降这个数。这是在假设没有任何 exceptions 被抛出的情况下。此处我们所讨论的只是“代码中出现 try 语句块”的成本而已。")]),s._v(" "),a("p",[s._v("主要是时间和空间上面的成本；")])])]),s._v(" "),a("p",[s._v("需要讨论， C++ runtime时候， 编译， 连接的时候，对这些exceptions是怎么处理的？")]),s._v(" "),a("h2",{attrs:{id:"效率-efficiency-这部分可以参考高性能c-相关的书籍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#效率-efficiency-这部分可以参考高性能c-相关的书籍"}},[s._v("#")]),s._v(" 效率（efficiency）, 这部分可以参考高性能C++相关的书籍")]),s._v(" "),a("p",[s._v("与运行时， 虚函数， 以及对象的内存模型相关的知识；")]),s._v(" "),a("ol",{attrs:{start:"16"}},[a("li",[s._v("要清楚80-20法则， 有时候还是根方效率， 也就是100个人里面， 只有10个人完成了一半的工作， 10000个人里面只有100个人完成了一半的工作；")])]),s._v(" "),a("ul",[a("li",[s._v("只有20%代码占用了程序的80%的时间")])]),s._v(" "),a("ol",{attrs:{start:"17"}},[a("li",[s._v("考虑使用缓式评估（lazy evaluation）")])]),s._v(" "),a("ul",[a("li",[s._v("用到的时候, 再把需要的中间变量计算出来, 不然过早计算, 可能后面会用不到,")]),s._v(" "),a("li",[s._v("避免不必要的重复冗余计算;")]),s._v(" "),a("li",[s._v("用到的变量, 也是这样, 过早声明定义, 有可能会浪费")])]),s._v(" "),a("ol",{attrs:{start:"18"}},[a("li",[a("p",[s._v("分期摊还预期的计算成本")])]),s._v(" "),a("li",[a("p",[s._v("软件层面上做Cache和prefetch")])]),s._v(" "),a("li",[a("p",[s._v("了解临时对象是从哪里来的；")])]),s._v(" "),a("li",[a("p",[s._v("协助程序完成返回值优化（RVO）\n在return by value的时候， 在最后return的语句里面，直接返回实例的表达式， 可以省去在函数体内部多出来的一个临时对象；")])]),s._v(" "),a("li",[a("p",[s._v("利用overloading来避免隐式类型转换")])]),s._v(" "),a("li",[a("p",[s._v("考虑使用操作符复合形式（op=）取代其独立的形式（op）")]),s._v(" "),a("p",[s._v("+= 比 + 拥有更少的临时对象，\n在进行操作符重载的时候， 独立形式的操作符也会使用复合形式的操作符重载来完成， 和++a a++一样， 都会有多余的overhead；")])]),s._v(" "),a("li",[a("p",[s._v("积极使用其他的库")]),s._v(" "),a("p",[s._v("比如OneDNN / MKL、 libevent， 以及一些网络的库")])]),s._v(" "),a("li",[a("p",[s._v("虚函数， 多重继承，虚基类， RTTI的成本代价是什么")]),s._v(" "),a("p",[s._v("主要是对象的内存模型相关的内容， 对象模型那本书里面有更详细的讲解；")])])]),s._v(" "),a("h2",{attrs:{id:"技术-techniques-idioms-patterns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#技术-techniques-idioms-patterns"}},[s._v("#")]),s._v(" 技术（techniques, idioms, patterns）")]),s._v(" "),a("p",[s._v("这部分内容更像是设计模式要解决的相关的问题；")]),s._v(" "),a("ol",{attrs:{start:"25"}},[a("li",[a("p",[s._v("将copy constructor和non member functions 虚化")]),s._v(" "),a("p",[s._v("virtual copy constructor 感觉和设计模式里面的工厂模式是差不多的概念")]),s._v(" "),a("p",[s._v("non-member function的虚化：写一个虚函数做实际工作，再写一个什么都不做的非虚函数，只负责调用虚函数。当然啦，为了避免此巧妙安排蒙受函数调用所带来的成本，你可以将非虚函数 inline 化（")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("virtual")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token base-clause"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("virtual")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i am b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("C")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token base-clause"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("virtual")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i am c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\nstd"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" A "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    B b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    C c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\t\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("限制某个class所能产生的对象数量(如果只是一个， 那么用static对象， 记得看singleton设计模式)")])]),s._v(" "),a("p",[s._v("引用计数")]),s._v(" "),a("p",[s._v("使用全局函数， 并且用private来封锁ctor和dtor，全局函数里面包裹一个static的对象， 只能产生一个：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Printer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("submitJob")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" PrintJob"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" Job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reset")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("performSelfTest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("friend")]),s._v(" Printer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("thePrinter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Printer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Printer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Printer"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" rhs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nPrinter"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("thePrinter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" Printer p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("但是全局函数是不安全的， 最好不要动不动就用全局的东西")]),s._v(" "),a("p",[s._v("使用namespace来包裹一下这个全局函数；")]),s._v(" "),a("p",[s._v("`“class拥有一个 static对象”的意思是：即使从未被用到，它也会被构造（及析构）。相反地“函数拥有一个 static 对象”的意思是：此对象在函数第一次被调用时才产生。如果该函数从未被调用，这个对象也就绝不会诞生（然而你必须付出代价，在函数每次被调用时检查对象是否需要诞生）")])]),s._v(" "),a("li",[a("p",[s._v("人工限制或者禁止对象产生与heap之中")]),s._v(" "),a("p",[s._v("限制只能在heap里面产生对象， 就要把常规的构造和析构函数， 设置成为private：（private不能继承， 但是可以弄成protected的，但是protected就不知道是在heap上还是stack上面了）")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 做一个伪析构 */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("destory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 析构函数设为私有，防止在栈上构建对象 */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("M")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// A a_; /* 错误，不可在堆上创建 */")]),s._v("\n    A "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pa_"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 在内含类中，需要改为指针使用 */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// A a; /* 错误 */")]),s._v("\n    A "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pa "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 正确 */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// delete pa; /* 错误 */")]),s._v("\n    pa"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("destory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 正确 */")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[s._v("禁止在heap上产生对象， 要把operator new()， operator new"),a("a",{attrs:{href:""}}),s._v("以及相应的delete函数放在private里面；")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 用c++11的方式 */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n        static void *operator new(size_t) = delete;\n        static void operator delete(void *) = delete;\n        static void *operator new [](size_t) = delete;\n        static void operator delete [](void *) =delete;\n    */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size_t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("size_t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    A a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// A *pa = new A();   /* 错误 */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// A *pa = new A[10]; /* 错误 */")]),s._v("\n    A "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// delete p; /* 错误，delete已经被私有化，编译器就可以报错，delete []同原理 */")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("smart pointer智能指针")]),s._v(" "),a("p",[s._v("现代C++里面， 主要是auto_ptr(), shared_ptr()相关的类型， 可以使用；")])]),s._v(" "),a("li",[a("p",[s._v("reference counter引用技术 、 copy on write相关的技术")])]),s._v(" "),a("li",[a("p",[s._v("proxy class")]),s._v(" "),a("p",[s._v("代理类实际上有三种好处，")]),s._v(" "),a("ul",[a("li",[s._v("实现多维数组： 真实数组为一个一维数组，内嵌代理为一个一维数组，组合起来就是一个二维数组")]),s._v(" "),a("li",[s._v("区分读写")]),s._v(" "),a("li",[s._v("压制隐式转换\n因为返回的类型为代理类类型，所以很多操作需要隐式类型转换，如果代理类没实现，就不能进行隐式类型转换，这样可以有效的压制隐式类型转换")])])]),s._v(" "),a("li",[a("p",[s._v("让函数根据一个以上的对象类型来决定如何虚化这个函数；")]),s._v(" "),a("p",[s._v("虚函数的调用其实也可以理解为一个message dispatch,  如果一个虚函数要根据两个参数的类型来进行虚化， 则称为 double dispatch,")]),s._v(" "),a("p",[s._v("使用RTTI， typeid();")])])]),s._v(" "),a("h2",{attrs:{id:"杂项讨论-misc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#杂项讨论-misc"}},[s._v("#")]),s._v(" 杂项讨论，Misc")]),s._v(" "),a("ol",{attrs:{start:"32"}},[a("li",[a("p",[s._v("在未来时态下发展程序， 为以后程序的变动留下足够的弹性设计空间；（设计模式和设计经验， 架构的经验）")]),s._v(" "),a("p",[s._v("● 提供完整的 classes（见条款 E18）——即使某些部分目前用不到。当新的需求进来，你不太需要回头去修改那些 classes。")]),s._v(" "),a("p",[s._v("● 设计你的接口，使有利于共同的操作行为，阻止共同的错误（见条款 E46）。让这些 classes 轻易地被正确运用，难以被错误运用。例如，面对那些“copying和 assignment 并不合理”的classes，请禁止那些动作的发生（见条款 E27）。请防止部分赋值（partial assignments，见条款 33）的发生。")]),s._v(" "),a("p",[s._v("● 尽量使你的代码一般化（泛化），除非有不良的巨大后果。举个例子，如果你正在写一个算法，用于树状结构（tree）的来回遍历，请考虑将它一般化，以便能够处理任何种类的 directed acyclic（非环状的）graph")])]),s._v(" "),a("li",[a("p",[s._v("将non leaf class 设计为一个抽象类")])]),s._v(" "),a("li",[a("p",[s._v("如何在同一个程序中结合C和C++")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("ifdef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("_cplusplus")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extern")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"C"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("ifdef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[s._v("_cplusplus")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("endif")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("static class 对象、全局对象、namespace 内的对象以及文件范围（file scope）内的对象，其 constructors 总是在 main 之前就获得执行。这个过程称为 static initialization（见条款 E47")])]),s._v(" "),a("li",[a("p",[s._v("让自己习惯于标准的C++的一些新特性，")]),s._v(" "),a("ul",[a("li",[s._v("支持数值应用。复数（complex numbers）长久以来是许多 C++教科书的示范对象，如今终于被奉祀于标准程序库的殿堂上。此外，标准程序库还包含特殊的数组类（valarrays），可以制止别名（aliasing）的发生。这些数组比传统的内建数组有更进取的优化倾向，特别是在多进程结构体系（multiprocessing architectures）下。标准程序库也提供一些常用的数值函数，包括“部分和（partial sum）”以及“相邻差值（adjacent difference）”。●")]),s._v(" "),a("li",[s._v("支持广泛用途的 containers（容器）和 algorithms（算法）。C++标准程序库内含一组 class templates 和 function templates，统称为 Standard Template Library（STL）。STL 是 C++标准程序库中最具革命性的部分。稍后我会摘要说明其特征。")]),s._v(" "),a("li",[s._v("支持数值应用。复数（complex numbers）长久以来是许多 C++教科书的示范对象，如今终于被奉祀于标准程序库的殿堂上。此外，标准程序库还包含特殊的数组类（valarrays），可以制止别名（aliasing）的发生。这些数组比传统的内建数组有更进取的优化倾向，特别是在多进程结构体系（multiprocessing architectures）下。标准程序库也提供一些常用的数值函数，包括“部分和（partial sum）”以及“相邻差值（adjacent difference）”。")]),s._v(" "),a("li",[s._v("支持广泛用途的 containers（容器）和 algorithms（算法）。C++标准程序库内含一组 class templates 和 function templates，统称为 Standard Template Library（STL）。STL 是 C++标准程序库中最具革命性的部分。稍后我会摘要说明其特征。")]),s._v(" "),a("li",[s._v("STL\n"),a("ul",[a("li",[s._v("支持 C标准函数库。别担心，C++还记得它的根源。某些微小的变化，使“C++版本的 C函数库”与“C++的强烈类型检验性质”得以一致。但是，你对 C函数库所知道的一切，以及对它的爱恨情仇，在 C++中都依然存在。")]),s._v(" "),a("li",[s._v("支持 strings。就像 C++标准程序库小组主席 Mike Vilot所说：“如果没有提供一个标准的 string 类型，恐怕会出现街头流血事件！”（有些人就是这么感情用事。）冷静点，放下那些砖头棍棒——C++标准程序库提供了 string。")]),s._v(" "),a("li",[s._v("支持国别（地域别、本土化，localization）。不同的文化使用不同的字符集，并在显示日期、时间、排序事物、货币值的时候有着不同的习俗。标准程序库对于国别的支持，使程序开发得以轻松容纳多种文化差异。")]),s._v(" "),a("li",[s._v("支持 I/O。iostream 程序库仍旧是标准 C++的一部分，但是委员会对它做了一些修补。虽然某些 classes 被剔除了（特别值得注意的是 iostream 和fstream），某些 classes 被取代了（例如 string-based stringstreams 取代了 char＊-based strstreams，后者不再被标准委员会认可），不过 iostream 内的各个标准 classes仍可忠实反映那些早已存在多年的基本功能。")]),s._v(" "),a("li",[s._v("支持数值应用。复数（complex numbers）长久以来是许多 C++教科书的示范对象，如今终于被奉祀于标准程序库的殿堂上。此外，标准程序库还包含特殊的数组类（valarrays），可以制止别名（aliasing）的发生。这些数组比传统的内建数组有更进取的优化倾向，特别是在多进程结构体系（multiprocessing architectures）下。标准程序库也提供一些常用的数值函数，包括“部分和（partial sum）”以及“相邻差值（adjacent difference）”。")]),s._v(" "),a("li",[s._v("支持数值应用。复数（complex numbers）长久以来是许多 C++教科书的示范对象，如今终于被奉祀于标准程序库的殿堂上。此外，标准程序库还包含特殊的数组类（valarrays），可以制止别名（aliasing）的发生。这些数组比传统的内建数组有更进取的优化倾向，特别是在多进程结构体系（multiprocessing architectures）下。标准程序库也提供一些常用的数值函数，包括“部分和（partial sum）”以及“相邻差值（adjacent difference）”。")]),s._v(" "),a("li",[s._v("支持广泛用途的 containers（容器）和 algorithms（算法）。C++标准程序库内含一组 class templates 和 function templates，统称为 Standard Template Library（STL）。STL 是 C++标准程序库中最具革命性的部分。稍后我会摘要说明其特征。")])])])])])]),s._v(" "),a("p",[s._v("推荐的阅读清单： 后面可以一起总结")]),s._v(" "),a("p",[s._v("一个造轮子的repo： https://github.com/codecrafters-io/build-your-own-x")]),s._v(" "),a("p",[s._v("shared_ptr()代码")]),s._v(" "),a("p",[s._v("auto_ptr()")])])}),[],!1,null,null,null);t.default=e.exports}}]);